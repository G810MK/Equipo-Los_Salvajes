/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import BaseDatos.BD;
import Clases.Alumno;
import Clases.Conocimiento;
import Clases.Desempe√±o;
import Clases.Eval_Diagnostica;
import Clases.Lista;
import Clases.Actitud;
import Clases.Producto;
import Clases.PuntosExtras;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author MHC <miguel.hrc>
 */
public class FrmPrincipal extends javax.swing.JDialog {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        this.jCmbUnidadD.setEnabled(false);
        this.jTxtNombreTrabajo.setEnabled(false);
        this.jBtnGuardarD.setVisible(false);
        this.jBtnAgregarD.setEnabled(false);
        this.jBtnCancelarD.setEnabled(false);

        this.jCmbUnidadP.setEnabled(false);
        this.jTxtNombreProducto.setEnabled(false);
        this.jBtnAgregarP.setEnabled(false);
        this.jBtnGuardarP.setVisible(false);
        this.jBtnCancelarP.setEnabled(false);

        jCmbUnidadC.setEnabled(false);
        this.jBtnAgregarC.setEnabled(false);
        this.jBtnGuardarC.setVisible(false);
        this.jBtnCancelarC.setEnabled(false);

        this.jTxtNCAlmPE.setEnabled(false);
        this.jTxtNombreAlmPE.setEnabled(false);
        this.jCmbUnidadPE.setEnabled(false);
        this.jTxtPuntosExtras.setEnabled(false);
        this.jBtnGuardarPE.setEnabled(false);
        this.jBtnCancelarPE.setEnabled(false);

        this.jBtnAgregarED.setEnabled(true);
        this.jBtnCancelarED.setEnabled(true);

        this.jBtnAgregarA.setEnabled(false);
        jCmbUnidadAc1.setEnabled(false);
        jBtnAgregarA.setVisible(false);
        jDtcUnidadAc1.setEnabled(false);
        jBtnAgregarAc1.setEnabled(false);
        jBtnModificarAlm.setEnabled(false);

        jBtnMostrar.setEnabled(false);
        jTxtNCAlm.setEnabled(false);
        jTxtNombreAlm.setEnabled(false);

        jBtnAgregarC1.setEnabled(false);
        jBtnAgregarP1.setEnabled(false);
        jBtnAgregarD1.setEnabled(false);
        jBtnAgregarPE1.setEnabled(false);
        jBtnAgregarD3.setEnabled(false);
        jBtnAgregarED.setEnabled(false);
        jBtnCancelarED.setEnabled(false);
        jBtnActualizarAcM.setEnabled(false);
        //JTable setAutoResizeMode = jTblConsultarListaLs.setAutoResizeMode(JTable.AUTO_RESIZE_ON);
        //TableColumnModel columnModel = jTblConsultarListaLs.getColumnModel();

        //columnModel.getColumn(0).setPreferredWidth(50);
        try {
            this.LLenarTablaLista();
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public int uno;
    String Carrera;
    String Grupo;
    String Semestre;
    String Materia;
    String Trabajo;
    String Fecha5;
    public String IDL;
    public String IDAl;
    public String IDCon;
    public String IDAc;
    public String IDDes = "";
    public String IDPro = "";
    public int opc;

    //private boolean[] editable = {false, false, false, false};
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jFrame1 = new javax.swing.JFrame();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jPpmEliminarLista = new javax.swing.JPopupMenu();
        jMniEliminarLista = new javax.swing.JMenuItem();
        jPpmEliminarAlumno = new javax.swing.JPopupMenu();
        jMniEliminarAlumno = new javax.swing.JMenuItem();
        Unidad = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        TxtMateriaLs = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TxtGrupoLs = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TxtSemestreLs = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TxtCarreraLs = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        BtnGuardarLista = new javax.swing.JButton();
        jLblListaGeneral = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTblConsultarListaLs = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jTbpModificar = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jTxtNCAl = new javax.swing.JTextField();
        TxtPaternoAl = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        TxtMaternoAl = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jCmbCarreraAl = new javax.swing.JComboBox<>();
        jCmbGrupoAl = new javax.swing.JComboBox<>();
        jCmbSemestreAl = new javax.swing.JComboBox<>();
        jCmbMateriaAl = new javax.swing.JComboBox<>();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        TxtNombreAl = new javax.swing.JTextField();
        jLblAlumno = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        jSeparator10 = new javax.swing.JSeparator();
        jSeparator11 = new javax.swing.JSeparator();
        BtnGuardarAlumno = new javax.swing.JButton();
        jSeparator14 = new javax.swing.JSeparator();
        jSeparator17 = new javax.swing.JSeparator();
        jSeparator49 = new javax.swing.JSeparator();
        jPanel7 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jTxtNCAlm = new javax.swing.JTextField();
        jTxtNombreAlm = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTblConsultarAlumno = new javax.swing.JTable();
        jLblDatos = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        jSeparator13 = new javax.swing.JSeparator();
        jBtnModificarAlm = new javax.swing.JButton();
        jCmbSemestreAlm = new javax.swing.JComboBox<>();
        jCmbGrupoAlm = new javax.swing.JComboBox<>();
        jCmbCarreraAlm = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jCmbMateriaAlm = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jBtnBuscarAlm = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jSeparator26 = new javax.swing.JSeparator();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jCmbMateriaC = new javax.swing.JComboBox<>();
        jLblCarrera5 = new javax.swing.JLabel();
        jCmbCarreraC = new javax.swing.JComboBox<>();
        jLblSemestre5 = new javax.swing.JLabel();
        jCmbSemestreC = new javax.swing.JComboBox<>();
        jLblGrupo5 = new javax.swing.JLabel();
        jCmbGrupoC = new javax.swing.JComboBox<>();
        jBtnBuscarC = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        jCmbUnidadC = new javax.swing.JComboBox<>();
        jLabel51 = new javax.swing.JLabel();
        jSeparator27 = new javax.swing.JSeparator();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTblConocimiento = new javax.swing.JTable();
        jBtnAgregarC = new javax.swing.JButton();
        jBtnCancelarC = new javax.swing.JButton();
        jBtnGuardarC = new javax.swing.JButton();
        jSeparator31 = new javax.swing.JSeparator();
        jPanel15 = new javax.swing.JPanel();
        jSeparator28 = new javax.swing.JSeparator();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jCmbMateriaC1 = new javax.swing.JComboBox<>();
        jLblCarrera6 = new javax.swing.JLabel();
        jCmbCarreraC1 = new javax.swing.JComboBox<>();
        jLblSemestre6 = new javax.swing.JLabel();
        jCmbSemestreC1 = new javax.swing.JComboBox<>();
        jLblGrupo6 = new javax.swing.JLabel();
        jCmbGrupoC1 = new javax.swing.JComboBox<>();
        jBtnBuscarC1 = new javax.swing.JButton();
        jLabel54 = new javax.swing.JLabel();
        jCmbUnidadC1 = new javax.swing.JComboBox<>();
        jLabel55 = new javax.swing.JLabel();
        jSeparator29 = new javax.swing.JSeparator();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTblConocimiento1 = new javax.swing.JTable();
        jBtnAgregarC1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jSeparator20 = new javax.swing.JSeparator();
        jLabel39 = new javax.swing.JLabel();
        jLblCarrera3 = new javax.swing.JLabel();
        jLblSemestre3 = new javax.swing.JLabel();
        jLblGrupo3 = new javax.swing.JLabel();
        jCmbGrupoP = new javax.swing.JComboBox<>();
        jBtnBuscarP = new javax.swing.JButton();
        jCmbSemestreP = new javax.swing.JComboBox<>();
        jCmbCarreraP = new javax.swing.JComboBox<>();
        jCmbMateriaP = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        jSeparator21 = new javax.swing.JSeparator();
        jLabel41 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTblProducto = new javax.swing.JTable();
        jCmbUnidadP = new javax.swing.JComboBox<>();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jTxtNombreProducto = new javax.swing.JTextField();
        jSeparator22 = new javax.swing.JSeparator();
        jBtnAgregarP = new javax.swing.JButton();
        jBtnGuardarP = new javax.swing.JButton();
        jBtnCancelarP = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jSeparator23 = new javax.swing.JSeparator();
        jCmbMateriaP1 = new javax.swing.JComboBox<>();
        jCmbCarreraP1 = new javax.swing.JComboBox<>();
        jLblCarrera4 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jSeparator24 = new javax.swing.JSeparator();
        jCmbUnidadP1 = new javax.swing.JComboBox<>();
        jLabel47 = new javax.swing.JLabel();
        jBtnAgregarP1 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTblProducto1 = new javax.swing.JTable();
        jCmbSemestreP1 = new javax.swing.JComboBox<>();
        jCmbGrupoP1 = new javax.swing.JComboBox<>();
        jBtnBuscarP1 = new javax.swing.JButton();
        jLblSemestre4 = new javax.swing.JLabel();
        jLblGrupo4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jSeparator18 = new javax.swing.JSeparator();
        jLabel33 = new javax.swing.JLabel();
        jLblCarrera1 = new javax.swing.JLabel();
        jLblSemestre1 = new javax.swing.JLabel();
        jLblGrupo1 = new javax.swing.JLabel();
        jCmbGrupoD = new javax.swing.JComboBox<>();
        jBtnBuscarD = new javax.swing.JButton();
        jCmbSemestreD = new javax.swing.JComboBox<>();
        jCmbCarreraD = new javax.swing.JComboBox<>();
        jCmbMateriaD = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jSeparator15 = new javax.swing.JSeparator();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTblDesempe√±o = new javax.swing.JTable();
        jCmbUnidadD = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jTxtNombreTrabajo = new javax.swing.JTextField();
        jSeparator16 = new javax.swing.JSeparator();
        jBtnAgregarD = new javax.swing.JButton();
        jBtnGuardarD = new javax.swing.JButton();
        jBtnCancelarD = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jSeparator19 = new javax.swing.JSeparator();
        jCmbMateriaD1 = new javax.swing.JComboBox<>();
        jCmbCarreraD1 = new javax.swing.JComboBox<>();
        jLblCarrera2 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jSeparator25 = new javax.swing.JSeparator();
        jCmbUnidadD1 = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        jBtnAgregarD1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTblDesempe√±o1 = new javax.swing.JTable();
        jCmbSemestreD1 = new javax.swing.JComboBox<>();
        jCmbGrupoD1 = new javax.swing.JComboBox<>();
        jBtnBuscarD1 = new javax.swing.JButton();
        jLblSemestre2 = new javax.swing.JLabel();
        jLblGrupo2 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel17 = new javax.swing.JPanel();
        jSeparator30 = new javax.swing.JSeparator();
        jLabel38 = new javax.swing.JLabel();
        jLblCarrera7 = new javax.swing.JLabel();
        jLblSemestre7 = new javax.swing.JLabel();
        jLblGrupo7 = new javax.swing.JLabel();
        jCmbGrupoPE = new javax.swing.JComboBox<>();
        jBtnBuscarPE = new javax.swing.JButton();
        jCmbSemestrePE = new javax.swing.JComboBox<>();
        jCmbCarreraPE = new javax.swing.JComboBox<>();
        jCmbMateriaPE = new javax.swing.JComboBox<>();
        jLabel56 = new javax.swing.JLabel();
        jSeparator32 = new javax.swing.JSeparator();
        jLabel57 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTblPuntosExtras = new javax.swing.JTable();
        jCmbUnidadPE = new javax.swing.JComboBox<>();
        jLabel58 = new javax.swing.JLabel();
        jSeparator33 = new javax.swing.JSeparator();
        jBtnGuardarPE = new javax.swing.JButton();
        jBtnCancelarPE = new javax.swing.JButton();
        jTxtNCAlmPE = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jTxtNombreAlmPE = new javax.swing.JTextField();
        jTxtPuntosExtras = new javax.swing.JTextField();
        jLabel66 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jSeparator34 = new javax.swing.JSeparator();
        jCmbMateriaPE1 = new javax.swing.JComboBox<>();
        jCmbCarreraPE1 = new javax.swing.JComboBox<>();
        jLblCarrera8 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jSeparator35 = new javax.swing.JSeparator();
        jCmbUnidadPE1 = new javax.swing.JComboBox<>();
        jLabel63 = new javax.swing.JLabel();
        jBtnAgregarPE1 = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTblPuntosExtras1 = new javax.swing.JTable();
        jCmbSemestrePE1 = new javax.swing.JComboBox<>();
        jCmbGrupoPE1 = new javax.swing.JComboBox<>();
        jBtnBuscarPE1 = new javax.swing.JButton();
        jLblSemestre8 = new javax.swing.JLabel();
        jLblGrupo8 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel74 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jSeparator40 = new javax.swing.JSeparator();
        jLblCarrera11 = new javax.swing.JLabel();
        jLblSemestre11 = new javax.swing.JLabel();
        jLblGrupo11 = new javax.swing.JLabel();
        jCmbGrupoU = new javax.swing.JComboBox<>();
        jCmbSemestreU = new javax.swing.JComboBox<>();
        jCmbCarreraU = new javax.swing.JComboBox<>();
        jCmbMateriaU = new javax.swing.JComboBox<>();
        jBtnBuscarU = new javax.swing.JButton();
        jLabel77 = new javax.swing.JLabel();
        jSeparator41 = new javax.swing.JSeparator();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTblUnidad = new javax.swing.JTable();
        jLabel67 = new javax.swing.JLabel();
        jCmbUnidadU = new javax.swing.JComboBox<>();
        jPanel19 = new javax.swing.JPanel();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel25 = new javax.swing.JPanel();
        jSeparator45 = new javax.swing.JSeparator();
        jLabel59 = new javax.swing.JLabel();
        jLblCarrera9 = new javax.swing.JLabel();
        jLblSemestre9 = new javax.swing.JLabel();
        jLblGrupo9 = new javax.swing.JLabel();
        jCmbGrupoED = new javax.swing.JComboBox<>();
        jBtnBuscarED = new javax.swing.JButton();
        jCmbSemestreED = new javax.swing.JComboBox<>();
        jCmbCarreraED = new javax.swing.JComboBox<>();
        jCmbMateriaED = new javax.swing.JComboBox<>();
        jLabel68 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTblEvaluacionD = new javax.swing.JTable();
        jLabel75 = new javax.swing.JLabel();
        jSeparator39 = new javax.swing.JSeparator();
        jBtnAgregarED = new javax.swing.JButton();
        jBtnCancelarED = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jLabel71 = new javax.swing.JLabel();
        jSeparator37 = new javax.swing.JSeparator();
        jCmbMateriaED1 = new javax.swing.JComboBox<>();
        jCmbCarreraED1 = new javax.swing.JComboBox<>();
        jLblCarrera10 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jSeparator38 = new javax.swing.JSeparator();
        jBtnAgregarD3 = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTblEvaluacionD1 = new javax.swing.JTable();
        jCmbSemestreED1 = new javax.swing.JComboBox<>();
        jCmbGrupoED1 = new javax.swing.JComboBox<>();
        jBtnBuscarED1 = new javax.swing.JButton();
        jLblSemestre10 = new javax.swing.JLabel();
        jLblGrupo10 = new javax.swing.JLabel();
        jLblPromedio = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jSeparator43 = new javax.swing.JSeparator();
        jLblCarrera12 = new javax.swing.JLabel();
        jLblSemestre12 = new javax.swing.JLabel();
        jLblGrupo12 = new javax.swing.JLabel();
        jCmbGrupoS = new javax.swing.JComboBox<>();
        jCmbSemestreS = new javax.swing.JComboBox<>();
        jCmbCarreraS = new javax.swing.JComboBox<>();
        jCmbMateriaS = new javax.swing.JComboBox<>();
        jBtnBuscarS = new javax.swing.JButton();
        jLabel83 = new javax.swing.JLabel();
        jSeparator44 = new javax.swing.JSeparator();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTblSemestre = new javax.swing.JTable();
        jBtnMostrar = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel26 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator36 = new javax.swing.JSeparator();
        jLblMateria1 = new javax.swing.JLabel();
        jCmbMateriaAc1 = new javax.swing.JComboBox<>();
        jLblCarrera13 = new javax.swing.JLabel();
        jCmbCarreraAc1 = new javax.swing.JComboBox<>();
        jLblSemestre13 = new javax.swing.JLabel();
        jCmbSemestreAc1 = new javax.swing.JComboBox<>();
        jLblGrupo13 = new javax.swing.JLabel();
        jCmbGrupoAc1 = new javax.swing.JComboBox<>();
        jBtnBuscarAc1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jSeparator42 = new javax.swing.JSeparator();
        jLblUnidad1 = new javax.swing.JLabel();
        jCmbUnidadAc1 = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        jDtcUnidadAc1 = new com.toedter.calendar.JDateChooser();
        jSeparator46 = new javax.swing.JSeparator();
        jBtnAgregarAc1 = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTblActitudA = new javax.swing.JTable();
        jBtnAgregarA = new javax.swing.JButton();
        jBtnCancelarA = new javax.swing.JButton();
        jPanel27 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jSeparator47 = new javax.swing.JSeparator();
        jLblMateria2 = new javax.swing.JLabel();
        jCmbMateriaAcM = new javax.swing.JComboBox<>();
        jCmbCarreraAcM = new javax.swing.JComboBox<>();
        jLblCarrera14 = new javax.swing.JLabel();
        jLblSemestre14 = new javax.swing.JLabel();
        jCmbSemestreAcM = new javax.swing.JComboBox<>();
        jLblGrupo14 = new javax.swing.JLabel();
        jCmbGrupoAcM = new javax.swing.JComboBox<>();
        jBtnBuscarAcM = new javax.swing.JButton();
        jLabel69 = new javax.swing.JLabel();
        jSeparator48 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTblActitudM = new javax.swing.JTable();
        jBtnActualizarAcM = new javax.swing.JButton();
        jCmbUnidadAcM = new javax.swing.JComboBox<>();
        jLblGrupo15 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMICargar = new javax.swing.JMenuItem();
        jMiSalir = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenu2.setText("jMenu2");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jMniEliminarLista.setText("Eliminar");
        jMniEliminarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMniEliminarListaActionPerformed(evt);
            }
        });
        jPpmEliminarLista.add(jMniEliminarLista);

        jMniEliminarAlumno.setText("Eliminar");
        jPpmEliminarAlumno.add(jMniEliminarAlumno);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Unidad.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel5.setText("Datos del la lista:");

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel1.setText("Materia:");

        TxtMateriaLs.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        TxtMateriaLs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtMateriaLsKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel2.setText("Grupo:");

        TxtGrupoLs.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        TxtGrupoLs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtGrupoLsKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel3.setText("Semestre:");

        TxtSemestreLs.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        TxtSemestreLs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtSemestreLsKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel4.setText("Carrera:");

        TxtCarreraLs.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        TxtCarreraLs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtCarreraLsKeyTyped(evt);
            }
        });

        BtnGuardarLista.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        BtnGuardarLista.setText("Guardar");
        BtnGuardarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGuardarListaActionPerformed(evt);
            }
        });

        jLblListaGeneral.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblListaGeneral.setText("Lista General");

        jTblConsultarListaLs = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, false, false};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblConsultarListaLs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblConsultarListaLs.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTblConsultarListaLs.setComponentPopupMenu(jPpmEliminarLista);
        jTblConsultarListaLs.getTableHeader().setResizingAllowed(false);
        jTblConsultarListaLs.getTableHeader().setReorderingAllowed(false);
        jTblConsultarListaLs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTblConsultarListaLsFocusGained(evt);
            }
        });
        jTblConsultarListaLs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblConsultarListaLsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTblConsultarListaLs);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(14, 14, 14)
                                .addComponent(TxtGrupoLs, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(22, 22, 22)
                                .addComponent(TxtMateriaLs, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(14, 14, 14)
                                .addComponent(TxtSemestreLs, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(14, 14, 14)
                                .addComponent(TxtCarreraLs, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLblListaGeneral)
                        .addGap(244, 244, 244))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(BtnGuardarLista))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
                .addGap(8, 8, 8))
            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addComponent(TxtMateriaLs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblListaGeneral))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel2))
                            .addComponent(TxtGrupoLs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3))
                            .addComponent(TxtSemestreLs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel4))
                            .addComponent(TxtCarreraLs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnGuardarLista)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(112, Short.MAX_VALUE))
        );

        Unidad.addTab("Lista", jPanel1);

        jTbpModificar.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jTxtNCAl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTxtNCAl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtNCAlKeyTyped(evt);
            }
        });

        TxtPaternoAl.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        TxtPaternoAl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtPaternoAlKeyTyped(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel13.setText("Carrera:");

        jLabel14.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel14.setText("Grupo:");

        jLabel15.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel15.setText("Semestre:");

        jLabel16.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel16.setText("Materia:");

        jLabel17.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel17.setText("Apellido materno:");

        TxtMaternoAl.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        TxtMaternoAl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtMaternoAlKeyTyped(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel18.setText("Apellido paterno:");

        jLabel19.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel19.setText("No.Control:");

        jCmbCarreraAl.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraAl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraAlFocusGained(evt);
            }
        });
        jCmbCarreraAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraAlActionPerformed(evt);
            }
        });

        jCmbGrupoAl.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoAl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoAlFocusGained(evt);
            }
        });
        jCmbGrupoAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoAlActionPerformed(evt);
            }
        });

        jCmbSemestreAl.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreAl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreAlFocusGained(evt);
            }
        });
        jCmbSemestreAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreAlActionPerformed(evt);
            }
        });

        jCmbMateriaAl.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaAl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaAlFocusGained(evt);
            }
        });
        jCmbMateriaAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaAlActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel20.setText("Nombre(s):");

        TxtNombreAl.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        TxtNombreAl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtNombreAlKeyTyped(evt);
            }
        });

        jLblAlumno.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLblAlumno.setText("Datos del alumno:");

        jSeparator10.setOrientation(javax.swing.SwingConstants.VERTICAL);

        BtnGuardarAlumno.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        BtnGuardarAlumno.setText("Guardar");
        BtnGuardarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGuardarAlumnoActionPerformed(evt);
            }
        });

        jSeparator49.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel16)
                        .addGap(26, 26, 26)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTxtNCAl, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(210, 210, 210)
                                .addComponent(jLabel15))))
                    .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(TxtNombreAl, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(570, 570, 570)
                        .addComponent(BtnGuardarAlumno))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel18))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel19))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(560, 560, 560)
                        .addComponent(jSeparator49, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLblAlumno))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jCmbMateriaAl, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jLabel13))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabel17))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(jLabel20))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(jCmbSemestreAl, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(TxtMaternoAl, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jCmbCarreraAl, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(jCmbGrupoAl, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(TxtPaternoAl, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(jLabel14))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator17, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel16))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jTxtNCAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(jLabel15))
                    .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(TxtNombreAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BtnGuardarAlumno)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel18))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel19))
                    .addComponent(jSeparator49, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLblAlumno))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jCmbMateriaAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel13))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel17))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel20))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jCmbSemestreAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(TxtMaternoAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jCmbCarreraAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jCmbGrupoAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(TxtPaternoAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel14))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator17, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTbpModificar.addTab("Alta", jPanel8);

        jLabel21.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel21.setText("No.Control:");

        jTxtNCAlm.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jTxtNCAlm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtNCAlmKeyTyped(evt);
            }
        });

        jTxtNombreAlm.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jTxtNombreAlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtNombreAlmActionPerformed(evt);
            }
        });
        jTxtNombreAlm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtNombreAlmKeyTyped(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel22.setText("Nombre:");

        jTblConsultarAlumno = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblConsultarAlumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblConsultarAlumno.setComponentPopupMenu(jPpmEliminarAlumno);
        jTblConsultarAlumno.getTableHeader().setResizingAllowed(false);
        jTblConsultarAlumno.getTableHeader().setReorderingAllowed(false);
        jTblConsultarAlumno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblConsultarAlumnoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTblConsultarAlumno);

        jLblDatos.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLblDatos.setText("Datos del alumno:");

        jBtnModificarAlm.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnModificarAlm.setText("Modificar");
        jBtnModificarAlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnModificarAlmActionPerformed(evt);
            }
        });

        jCmbSemestreAlm.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreAlm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreAlmFocusGained(evt);
            }
        });
        jCmbSemestreAlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreAlmActionPerformed(evt);
            }
        });

        jCmbGrupoAlm.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoAlm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoAlmFocusGained(evt);
            }
        });
        jCmbGrupoAlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoAlmActionPerformed(evt);
            }
        });

        jCmbCarreraAlm.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraAlm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraAlmFocusGained(evt);
            }
        });
        jCmbCarreraAlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraAlmActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel27.setText("Materia:");

        jLabel28.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel28.setText("Semestre:");

        jLabel29.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel29.setText("Grupo:");

        jLabel30.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel30.setText("Carrera:");

        jCmbMateriaAlm.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaAlm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaAlmFocusGained(evt);
            }
        });
        jCmbMateriaAlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaAlmActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel7.setText("Busqueda de lista:");

        jBtnBuscarAlm.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarAlm.setText("Buscar");
        jBtnBuscarAlm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarAlmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLblDatos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator12))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4))))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jSeparator13)
                                .addGap(6, 6, 6))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTxtNombreAlm, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                            .addGap(137, 137, 137)
                                            .addComponent(jBtnModificarAlm))
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addComponent(jLabel21)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTxtNCAlm, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 533, Short.MAX_VALUE)))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbMateriaAlm, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbCarreraAlm, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jCmbSemestreAlm, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jCmbGrupoAlm, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnBuscarAlm)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbCarreraAlm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbSemestreAlm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbGrupoAlm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnBuscarAlm)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29))
                        .addGap(32, 32, 32))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCmbMateriaAlm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLblDatos)
                    .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(jTxtNCAlm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(jTxtNombreAlm, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtnModificarAlm)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTbpModificar.addTab("Modificar", jPanel7);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTbpModificar)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTbpModificar)
        );

        Unidad.addTab("Alumno", jPanel2);

        jTabbedPane3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jLabel48.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel48.setText("Busqueda:");

        jLabel49.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel49.setText("Materia:");

        jCmbMateriaC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaCFocusGained(evt);
            }
        });
        jCmbMateriaC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaCActionPerformed(evt);
            }
        });

        jLblCarrera5.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera5.setText("Carrera:");

        jCmbCarreraC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraCFocusGained(evt);
            }
        });
        jCmbCarreraC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraCActionPerformed(evt);
            }
        });

        jLblSemestre5.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre5.setText("Semestre:");

        jCmbSemestreC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreCFocusGained(evt);
            }
        });
        jCmbSemestreC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreCActionPerformed(evt);
            }
        });

        jLblGrupo5.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo5.setText("Grupo:");

        jCmbGrupoC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoCFocusGained(evt);
            }
        });
        jCmbGrupoC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoCActionPerformed(evt);
            }
        });

        jBtnBuscarC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarC.setText("Buscar");
        jBtnBuscarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarCActionPerformed(evt);
            }
        });

        jLabel50.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel50.setText("Unidad:");

        jCmbUnidadC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel51.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel51.setText("Datos del conocimiento:");

        jTblConocimiento = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblConocimiento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblConocimiento.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(jTblConocimiento);

        jBtnAgregarC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarC.setText("Agregar");
        jBtnAgregarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarCActionPerformed(evt);
            }
        });

        jBtnCancelarC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnCancelarC.setText("Cancelar");
        jBtnCancelarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarCActionPerformed(evt);
            }
        });

        jBtnGuardarC.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnGuardarC.setText("Guardar");
        jBtnGuardarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGuardarCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator26))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel49)
                                    .addComponent(jCmbMateriaC, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCmbCarreraC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblCarrera5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblSemestre5)
                                    .addComponent(jCmbSemestreC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblGrupo5)
                                    .addGroup(jPanel14Layout.createSequentialGroup()
                                        .addComponent(jCmbGrupoC, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBtnBuscarC)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel51)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator27)))
                        .addContainerGap())
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel50)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCmbUnidadC, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 465, Short.MAX_VALUE)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))))
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jBtnAgregarC)
                        .addGap(119, 119, 119)
                        .addComponent(jBtnGuardarC)
                        .addGap(108, 108, 108)
                        .addComponent(jBtnCancelarC))
                    .addComponent(jSeparator31, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel48)
                    .addComponent(jSeparator26, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel49)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbMateriaC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLblCarrera5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbCarreraC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblSemestre5)
                            .addComponent(jLblGrupo5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbSemestreC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbGrupoC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnBuscarC))
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator27, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel51))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel50)
                            .addComponent(jCmbUnidadC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator31, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jBtnAgregarC))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jBtnCancelarC)
                                    .addComponent(jBtnGuardarC)))))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Agregar", jPanel14);

        jPanel15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel15.add(jSeparator28, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 1180, 10));

        jLabel52.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel52.setText("Busqueda:");
        jPanel15.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 18, 94, -1));

        jLabel53.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel53.setText("Materia:");
        jPanel15.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 57, -1, -1));

        jCmbMateriaC1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaC1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaC1FocusGained(evt);
            }
        });
        jCmbMateriaC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaC1ActionPerformed(evt);
            }
        });
        jPanel15.add(jCmbMateriaC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 80, 187, -1));

        jLblCarrera6.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera6.setText("Carrera:");
        jPanel15.add(jLblCarrera6, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 58, -1, -1));

        jCmbCarreraC1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraC1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraC1FocusGained(evt);
            }
        });
        jCmbCarreraC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraC1ActionPerformed(evt);
            }
        });
        jPanel15.add(jCmbCarreraC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 81, 120, -1));

        jLblSemestre6.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre6.setText("Semestre:");
        jPanel15.add(jLblSemestre6, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 56, -1, -1));

        jCmbSemestreC1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreC1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreC1FocusGained(evt);
            }
        });
        jCmbSemestreC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreC1ActionPerformed(evt);
            }
        });
        jPanel15.add(jCmbSemestreC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 81, 120, -1));

        jLblGrupo6.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo6.setText("Grupo:");
        jPanel15.add(jLblGrupo6, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 56, -1, -1));

        jCmbGrupoC1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoC1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoC1FocusGained(evt);
            }
        });
        jCmbGrupoC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoC1ActionPerformed(evt);
            }
        });
        jPanel15.add(jCmbGrupoC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 81, 120, -1));

        jBtnBuscarC1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarC1.setText("Buscar");
        jBtnBuscarC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarC1ActionPerformed(evt);
            }
        });
        jPanel15.add(jBtnBuscarC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(735, 79, -1, -1));

        jLabel54.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel54.setText("Unidad:");
        jPanel15.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 56, -1, -1));

        jCmbUnidadC1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadC1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jCmbUnidadC1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbUnidadC1FocusGained(evt);
            }
        });
        jPanel15.add(jCmbUnidadC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 80, 92, -1));

        jLabel55.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel55.setText("Datos del conocimiento:");
        jPanel15.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 114, -1, -1));
        jPanel15.add(jSeparator29, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 122, 894, 10));

        jTblConocimiento1 = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblConocimiento1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblConocimiento1.getTableHeader().setReorderingAllowed(false);
        jScrollPane10.setViewportView(jTblConocimiento1);

        jPanel15.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 143, 1146, 425));

        jBtnAgregarC1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarC1.setText("Actualizar");
        jBtnAgregarC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarC1ActionPerformed(evt);
            }
        });
        jPanel15.add(jBtnAgregarC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1162, 143, -1, -1));

        jTabbedPane3.addTab("Modificar", jPanel15);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );

        Unidad.addTab("Conocimiento", jPanel5);

        jTabbedPane5.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel12.add(jSeparator20, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 23, 1200, 10));

        jLabel39.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel39.setText("Materia:");
        jPanel12.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 48, -1, -1));

        jLblCarrera3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera3.setText("Carrera:");
        jPanel12.add(jLblCarrera3, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 48, -1, -1));

        jLblSemestre3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre3.setText("Semestre:");
        jPanel12.add(jLblSemestre3, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 48, -1, -1));

        jLblGrupo3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo3.setText("Grupo:");
        jPanel12.add(jLblGrupo3, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 46, -1, -1));

        jCmbGrupoP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoPFocusGained(evt);
            }
        });
        jCmbGrupoP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoPActionPerformed(evt);
            }
        });
        jPanel12.add(jCmbGrupoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 70, 120, -1));

        jBtnBuscarP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarP.setText("Buscar");
        jBtnBuscarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarPActionPerformed(evt);
            }
        });
        jPanel12.add(jBtnBuscarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 69, -1, -1));

        jCmbSemestreP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestrePFocusGained(evt);
            }
        });
        jCmbSemestreP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestrePActionPerformed(evt);
            }
        });
        jPanel12.add(jCmbSemestreP, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 71, 120, -1));

        jCmbCarreraP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraPFocusGained(evt);
            }
        });
        jCmbCarreraP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraPActionPerformed(evt);
            }
        });
        jPanel12.add(jCmbCarreraP, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 71, 120, -1));

        jCmbMateriaP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaPFocusGained(evt);
            }
        });
        jCmbMateriaP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaPActionPerformed(evt);
            }
        });
        jPanel12.add(jCmbMateriaP, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 71, 187, -1));

        jLabel40.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel40.setText("Datos del producto:");
        jPanel12.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 105, -1, -1));
        jPanel12.add(jSeparator21, new org.netbeans.lib.awtextra.AbsoluteConstraints(181, 115, 1112, 10));

        jLabel41.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel41.setText("Busqueda:");
        jPanel12.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 13, 95, -1));

        jTblProducto = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblProducto.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(jTblProducto);

        jPanel12.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(758, 129, 535, 425));

        jCmbUnidadP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jPanel12.add(jCmbUnidadP, new org.netbeans.lib.awtextra.AbsoluteConstraints(66, 129, 92, -1));

        jLabel42.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel42.setText("Unidad:");
        jPanel12.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 132, -1, -1));

        jLabel43.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel43.setText("Nombre de la tarea:");
        jPanel12.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, -1, -1));

        jTxtNombreProducto.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jPanel12.add(jTxtNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 193, 752, -1));
        jPanel12.add(jSeparator22, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 234, 752, 11));

        jBtnAgregarP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarP.setText("Agregar");
        jBtnAgregarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarPActionPerformed(evt);
            }
        });
        jPanel12.add(jBtnAgregarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 251, -1, -1));

        jBtnGuardarP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnGuardarP.setText("Guardar");
        jBtnGuardarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGuardarPActionPerformed(evt);
            }
        });
        jPanel12.add(jBtnGuardarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 251, -1, -1));

        jBtnCancelarP.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnCancelarP.setText("Cancelar");
        jBtnCancelarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarPActionPerformed(evt);
            }
        });
        jPanel12.add(jBtnCancelarP, new org.netbeans.lib.awtextra.AbsoluteConstraints(655, 251, -1, -1));

        jTabbedPane5.addTab("Agregar", jPanel12);

        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel44.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel44.setText("Busqueda:");
        jPanel13.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 13, 95, -1));
        jPanel13.add(jSeparator23, new org.netbeans.lib.awtextra.AbsoluteConstraints(83, 22, 1210, 11));

        jCmbMateriaP1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaP1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaP1FocusGained(evt);
            }
        });
        jCmbMateriaP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaP1ActionPerformed(evt);
            }
        });
        jPanel13.add(jCmbMateriaP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 69, 187, -1));

        jCmbCarreraP1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraP1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraP1FocusGained(evt);
            }
        });
        jCmbCarreraP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraP1ActionPerformed(evt);
            }
        });
        jPanel13.add(jCmbCarreraP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 69, 120, -1));

        jLblCarrera4.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera4.setText("Carrera:");
        jPanel13.add(jLblCarrera4, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 46, -1, -1));

        jLabel45.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel45.setText("Materia:");
        jPanel13.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 46, -1, -1));

        jLabel46.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel46.setText("Datos del desempe√±o:");
        jPanel13.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 103, -1, -1));
        jPanel13.add(jSeparator24, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 113, 1109, 10));

        jCmbUnidadP1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadP1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jCmbUnidadP1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbUnidadP1FocusGained(evt);
            }
        });
        jPanel13.add(jCmbUnidadP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 68, 92, -1));

        jLabel47.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel47.setText("Unidad:");
        jPanel13.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 44, -1, -1));

        jBtnAgregarP1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarP1.setText("Actualizar");
        jBtnAgregarP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarP1ActionPerformed(evt);
            }
        });
        jPanel13.add(jBtnAgregarP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 129, -1, -1));

        jTblProducto1 = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true, true, true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblProducto1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblProducto1.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(jTblProducto1);

        jPanel13.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 129, 1174, 458));

        jCmbSemestreP1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreP1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreP1FocusGained(evt);
            }
        });
        jCmbSemestreP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreP1ActionPerformed(evt);
            }
        });
        jPanel13.add(jCmbSemestreP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 69, 120, -1));

        jCmbGrupoP1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoP1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoP1FocusGained(evt);
            }
        });
        jCmbGrupoP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoP1ActionPerformed(evt);
            }
        });
        jPanel13.add(jCmbGrupoP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 69, 120, -1));

        jBtnBuscarP1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarP1.setText("Buscar");
        jBtnBuscarP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarP1ActionPerformed(evt);
            }
        });
        jPanel13.add(jBtnBuscarP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(729, 67, -1, -1));

        jLblSemestre4.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre4.setText("Semestre:");
        jPanel13.add(jLblSemestre4, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 46, -1, -1));

        jLblGrupo4.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo4.setText("Grupo:");
        jPanel13.add(jLblGrupo4, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 46, -1, -1));

        jTabbedPane5.addTab("Consulta", jPanel13);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Unidad.addTab("Producto", jPanel6);

        jTabbedPane2.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel9.add(jSeparator18, new org.netbeans.lib.awtextra.AbsoluteConstraints(83, 23, 1210, 10));

        jLabel33.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel33.setText("Materia:");
        jPanel9.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 46, -1, -1));

        jLblCarrera1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera1.setText("Carrera:");
        jPanel9.add(jLblCarrera1, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 46, -1, -1));

        jLblSemestre1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre1.setText("Semestre:");
        jPanel9.add(jLblSemestre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 46, -1, -1));

        jLblGrupo1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo1.setText("Grupo:");
        jPanel9.add(jLblGrupo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 44, -1, -1));

        jCmbGrupoD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoDFocusGained(evt);
            }
        });
        jCmbGrupoD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoDActionPerformed(evt);
            }
        });
        jPanel9.add(jCmbGrupoD, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 68, 120, -1));

        jBtnBuscarD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarD.setText("Buscar");
        jBtnBuscarD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarDActionPerformed(evt);
            }
        });
        jPanel9.add(jBtnBuscarD, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 67, -1, -1));

        jCmbSemestreD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreDFocusGained(evt);
            }
        });
        jCmbSemestreD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreDActionPerformed(evt);
            }
        });
        jPanel9.add(jCmbSemestreD, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 69, 120, -1));

        jCmbCarreraD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraDFocusGained(evt);
            }
        });
        jCmbCarreraD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraDActionPerformed(evt);
            }
        });
        jPanel9.add(jCmbCarreraD, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 69, 120, -1));

        jCmbMateriaD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaDFocusGained(evt);
            }
        });
        jCmbMateriaD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaDActionPerformed(evt);
            }
        });
        jPanel9.add(jCmbMateriaD, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 69, 187, -1));

        jLabel24.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel24.setText("Datos del desempe√±o:");
        jPanel9.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 103, -1, -1));
        jPanel9.add(jSeparator15, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 113, 1110, 10));

        jLabel32.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel32.setText("Busqueda:");
        jPanel9.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 13, 95, -1));

        jTblDesempe√±o = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblDesempe√±o.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblDesempe√±o.setColumnSelectionAllowed(true);
        jTblDesempe√±o.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTblDesempe√±o);

        jPanel9.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(758, 127, 535, 425));

        jCmbUnidadD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jPanel9.add(jCmbUnidadD, new org.netbeans.lib.awtextra.AbsoluteConstraints(66, 127, 92, -1));

        jLabel25.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel25.setText("Unidad:");
        jPanel9.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, -1, -1));

        jLabel31.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel31.setText("Nombre del trabajo:");
        jPanel9.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 168, -1, -1));

        jTxtNombreTrabajo.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jPanel9.add(jTxtNombreTrabajo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 191, 752, -1));
        jPanel9.add(jSeparator16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 225, 752, -1));

        jBtnAgregarD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarD.setText("Agregar");
        jBtnAgregarD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarDActionPerformed(evt);
            }
        });
        jPanel9.add(jBtnAgregarD, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 233, 97, -1));

        jBtnGuardarD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnGuardarD.setText("Guardar");
        jBtnGuardarD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGuardarDActionPerformed(evt);
            }
        });
        jPanel9.add(jBtnGuardarD, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 233, 97, -1));

        jBtnCancelarD.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnCancelarD.setText("Cancelar");
        jBtnCancelarD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarDActionPerformed(evt);
            }
        });
        jPanel9.add(jBtnCancelarD, new org.netbeans.lib.awtextra.AbsoluteConstraints(655, 233, -1, -1));

        jTabbedPane2.addTab("Agregar", jPanel9);

        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel34.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel34.setText("Busqueda:");
        jPanel10.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 13, 95, -1));
        jPanel10.add(jSeparator19, new org.netbeans.lib.awtextra.AbsoluteConstraints(83, 23, 1210, 10));

        jCmbMateriaD1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaD1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaD1FocusGained(evt);
            }
        });
        jCmbMateriaD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaD1ActionPerformed(evt);
            }
        });
        jPanel10.add(jCmbMateriaD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 67, 187, -1));

        jCmbCarreraD1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCmbCarreraD1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraD1FocusGained(evt);
            }
        });
        jCmbCarreraD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraD1ActionPerformed(evt);
            }
        });
        jPanel10.add(jCmbCarreraD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 69, 120, -1));

        jLblCarrera2.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera2.setText("Carrera:");
        jPanel10.add(jLblCarrera2, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 46, -1, -1));

        jLabel35.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel35.setText("Materia:");
        jPanel10.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 44, -1, -1));

        jLabel36.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel36.setText("Datos del desempe√±o:");
        jPanel10.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 101, -1, -1));
        jPanel10.add(jSeparator25, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 111, 1109, 10));

        jCmbUnidadD1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadD1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jCmbUnidadD1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbUnidadD1FocusGained(evt);
            }
        });
        jPanel10.add(jCmbUnidadD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 66, 92, -1));

        jLabel37.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel37.setText("Unidad:");
        jPanel10.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(619, 42, -1, -1));

        jBtnAgregarD1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarD1.setText("Actualizar");
        jBtnAgregarD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarD1ActionPerformed(evt);
            }
        });
        jPanel10.add(jBtnAgregarD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 127, -1, -1));

        jTblDesempe√±o1 = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true, true, true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblDesempe√±o1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblDesempe√±o1.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(jTblDesempe√±o1);

        jPanel10.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 127, 1174, 465));

        jCmbSemestreD1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCmbSemestreD1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreD1FocusGained(evt);
            }
        });
        jCmbSemestreD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreD1ActionPerformed(evt);
            }
        });
        jPanel10.add(jCmbSemestreD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 69, 120, -1));

        jCmbGrupoD1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCmbGrupoD1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoD1FocusGained(evt);
            }
        });
        jCmbGrupoD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoD1ActionPerformed(evt);
            }
        });
        jPanel10.add(jCmbGrupoD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 69, 120, -1));

        jBtnBuscarD1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarD1.setText("Buscar");
        jBtnBuscarD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarD1ActionPerformed(evt);
            }
        });
        jPanel10.add(jBtnBuscarD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(729, 65, -1, -1));

        jLblSemestre2.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre2.setText("Semestre:");
        jPanel10.add(jLblSemestre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 46, -1, -1));

        jLblGrupo2.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo2.setText("Grupo:");
        jPanel10.add(jLblGrupo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 46, -1, -1));

        jTabbedPane2.addTab("Consulta", jPanel10);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Unidad.addTab("Desempe√±o", jPanel4);

        jTabbedPane4.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jTabbedPane4.setInheritsPopupMenu(true);

        jLabel38.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel38.setText("Materia:");

        jLblCarrera7.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera7.setText("Carrera:");

        jLblSemestre7.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre7.setText("Semestre:");

        jLblGrupo7.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo7.setText("Grupo:");

        jCmbGrupoPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoPE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoPEFocusGained(evt);
            }
        });
        jCmbGrupoPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoPEActionPerformed(evt);
            }
        });

        jBtnBuscarPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarPE.setText("Buscar");
        jBtnBuscarPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarPEActionPerformed(evt);
            }
        });

        jCmbSemestrePE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestrePE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestrePEFocusGained(evt);
            }
        });
        jCmbSemestrePE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestrePEActionPerformed(evt);
            }
        });

        jCmbCarreraPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraPE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraPEFocusGained(evt);
            }
        });
        jCmbCarreraPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraPEActionPerformed(evt);
            }
        });

        jCmbMateriaPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaPE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaPEFocusGained(evt);
            }
        });
        jCmbMateriaPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaPEActionPerformed(evt);
            }
        });

        jLabel56.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel56.setText("Datos de puntos extras:");

        jLabel57.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel57.setText("Busqueda:");

        jTblPuntosExtras = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblPuntosExtras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblPuntosExtras.getTableHeader().setReorderingAllowed(false);
        jTblPuntosExtras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblPuntosExtrasMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(jTblPuntosExtras);

        jCmbUnidadPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadPE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel58.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel58.setText("Unidad:");

        jBtnGuardarPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnGuardarPE.setText("Guardar");
        jBtnGuardarPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGuardarPEActionPerformed(evt);
            }
        });

        jBtnCancelarPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnCancelarPE.setText("Cancelar");
        jBtnCancelarPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarPEActionPerformed(evt);
            }
        });

        jTxtNCAlmPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jTxtNCAlmPE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtNCAlmPEKeyTyped(evt);
            }
        });

        jLabel64.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel64.setText("No.Control:");

        jLabel65.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel65.setText("Nombre:");

        jTxtNombreAlmPE.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jTxtNombreAlmPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtNombreAlmPEActionPerformed(evt);
            }
        });
        jTxtNombreAlmPE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtNombreAlmPEKeyTyped(evt);
            }
        });

        jTxtPuntosExtras.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jTxtPuntosExtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtPuntosExtrasActionPerformed(evt);
            }
        });
        jTxtPuntosExtras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtPuntosExtrasKeyTyped(evt);
            }
        });

        jLabel66.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel66.setText("Puntos extras:");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jSeparator30, javax.swing.GroupLayout.PREFERRED_SIZE, 1210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel56)
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator32, javax.swing.GroupLayout.PREFERRED_SIZE, 1072, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel17Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jSeparator33, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel17Layout.createSequentialGroup()
                                                .addGap(130, 130, 130)
                                                .addComponent(jBtnGuardarPE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jBtnCancelarPE))))
                                    .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel17Layout.createSequentialGroup()
                                            .addGap(46, 46, 46)
                                            .addComponent(jLabel64)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTxtNCAlmPE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel17Layout.createSequentialGroup()
                                            .addGap(75, 75, 75)
                                            .addComponent(jLabel65)
                                            .addGap(10, 10, 10)
                                            .addComponent(jTxtNombreAlmPE, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(46, 46, 46))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                                        .addComponent(jLabel66)
                                        .addGap(10, 10, 10)
                                        .addComponent(jTxtPuntosExtras, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(357, 357, 357))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                                        .addComponent(jLabel58)
                                        .addGap(10, 10, 10)
                                        .addComponent(jCmbUnidadPE, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(508, 508, 508)))))
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel38))
                            .addComponent(jCmbMateriaPE, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblCarrera7)
                            .addComponent(jCmbCarreraPE, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblSemestre7)
                            .addComponent(jCmbSemestrePE, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblGrupo7)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addComponent(jCmbGrupoPE, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnBuscarPE)))))
                .addGap(10, 10, 10))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel57)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator30, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addGap(6, 6, 6)
                        .addComponent(jCmbMateriaPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLblCarrera7)
                        .addGap(6, 6, 6)
                        .addComponent(jCmbCarreraPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLblSemestre7)
                        .addGap(6, 6, 6)
                        .addComponent(jCmbSemestrePE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLblGrupo7)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbGrupoPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnBuscarPE))))
                .addGap(13, 13, 13)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel56)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator32, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel64)
                            .addComponent(jTxtNCAlmPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel65))
                            .addComponent(jTxtNombreAlmPE, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel58))
                            .addComponent(jCmbUnidadPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel66)
                            .addComponent(jTxtPuntosExtras, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator33, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnGuardarPE)
                            .addComponent(jBtnCancelarPE)))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane4.addTab("Agregar", jPanel17);

        jLabel60.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel60.setText("Busqueda:");

        jCmbMateriaPE1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaPE1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaPE1FocusGained(evt);
            }
        });
        jCmbMateriaPE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaPE1ActionPerformed(evt);
            }
        });

        jCmbCarreraPE1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraPE1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraPE1FocusGained(evt);
            }
        });
        jCmbCarreraPE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraPE1ActionPerformed(evt);
            }
        });

        jLblCarrera8.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera8.setText("Carrera:");

        jLabel61.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel61.setText("Materia:");

        jLabel62.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel62.setText("Datos de puntos extras:");

        jCmbUnidadPE1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadPE1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jCmbUnidadPE1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbUnidadPE1FocusGained(evt);
            }
        });

        jLabel63.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel63.setText("Unidad:");

        jBtnAgregarPE1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarPE1.setText("Actualizar");
        jBtnAgregarPE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarPE1ActionPerformed(evt);
            }
        });

        jTblPuntosExtras1 = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblPuntosExtras1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblPuntosExtras1.getTableHeader().setReorderingAllowed(false);
        jScrollPane12.setViewportView(jTblPuntosExtras1);

        jCmbSemestrePE1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestrePE1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestrePE1FocusGained(evt);
            }
        });
        jCmbSemestrePE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestrePE1ActionPerformed(evt);
            }
        });

        jCmbGrupoPE1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoPE1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoPE1FocusGained(evt);
            }
        });
        jCmbGrupoPE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoPE1ActionPerformed(evt);
            }
        });

        jBtnBuscarPE1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarPE1.setText("Buscar");
        jBtnBuscarPE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarPE1ActionPerformed(evt);
            }
        });

        jLblSemestre8.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre8.setText("Semestre:");

        jLblGrupo8.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo8.setText("Grupo:");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jLabel62)
                        .addGap(4, 4, 4)
                        .addComponent(jSeparator35, javax.swing.GroupLayout.PREFERRED_SIZE, 1082, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 1208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jBtnAgregarPE1))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jSeparator34, javax.swing.GroupLayout.PREFERRED_SIZE, 1210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel61)))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jCmbMateriaPE1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbCarreraPE1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblCarrera8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblSemestre8)
                            .addComponent(jCmbSemestrePE1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbGrupoPE1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblGrupo8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addComponent(jCmbUnidadPE1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnBuscarPE1))
                            .addComponent(jLabel63))))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator34, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel60))
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel61))
                        .addGroup(jPanel18Layout.createSequentialGroup()
                            .addGap(11, 11, 11)
                            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLblCarrera8)
                                .addComponent(jLblSemestre8))))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblGrupo8)
                            .addComponent(jLabel63))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCmbMateriaPE1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCmbCarreraPE1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCmbUnidadPE1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnBuscarPE1))
                                .addGap(1, 1, 1))
                            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCmbSemestrePE1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCmbGrupoPE1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(2, 2, 2)))
                .addGap(11, 11, 11)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel62)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator35, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnAgregarPE1)))
        );

        jTabbedPane4.addTab("Consulta", jPanel18);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Unidad.addTab("Puntos extras", jPanel11);

        jPanel22.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel74.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel74.setText("Busqueda:");
        jPanel22.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 95, -1));

        jLabel76.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel76.setText("Materia:");
        jPanel22.add(jLabel76, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 39, -1, -1));
        jPanel22.add(jSeparator40, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 21, 910, 10));

        jLblCarrera11.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera11.setText("Carrera:");
        jPanel22.add(jLblCarrera11, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 39, -1, -1));

        jLblSemestre11.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre11.setText("Semestre:");
        jPanel22.add(jLblSemestre11, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 39, -1, -1));

        jLblGrupo11.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo11.setText("Grupo:");
        jPanel22.add(jLblGrupo11, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 39, -1, -1));

        jCmbGrupoU.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoU.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoUFocusGained(evt);
            }
        });
        jCmbGrupoU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoUActionPerformed(evt);
            }
        });
        jPanel22.add(jCmbGrupoU, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 62, 120, -1));

        jCmbSemestreU.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreU.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreUFocusGained(evt);
            }
        });
        jCmbSemestreU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreUActionPerformed(evt);
            }
        });
        jPanel22.add(jCmbSemestreU, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 62, 120, -1));

        jCmbCarreraU.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraU.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraUFocusGained(evt);
            }
        });
        jCmbCarreraU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraUActionPerformed(evt);
            }
        });
        jPanel22.add(jCmbCarreraU, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 62, 120, -1));

        jCmbMateriaU.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaU.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaUFocusGained(evt);
            }
        });
        jCmbMateriaU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaUActionPerformed(evt);
            }
        });
        jPanel22.add(jCmbMateriaU, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 62, 120, -1));

        jBtnBuscarU.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarU.setText("Buscar");
        jBtnBuscarU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarUActionPerformed(evt);
            }
        });
        jPanel22.add(jBtnBuscarU, new org.netbeans.lib.awtextra.AbsoluteConstraints(672, 60, -1, -1));

        jLabel77.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel77.setText("Datos unidad:");
        jPanel22.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 103, -1, -1));
        jPanel22.add(jSeparator41, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 113, 891, 10));

        jTblUnidad = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, false, false, false,false, false};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblUnidad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblUnidad.getTableHeader().setReorderingAllowed(false);
        jScrollPane16.setViewportView(jTblUnidad);

        jPanel22.add(jScrollPane16, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 129, 1005, 479));

        jLabel67.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel67.setText("Unidad:");
        jPanel22.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 37, -1, -1));

        jCmbUnidadU.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadU.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jCmbUnidadU.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbUnidadUFocusGained(evt);
            }
        });
        jPanel22.add(jCmbUnidadU, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 61, 92, -1));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        Unidad.addTab("Unidad", jPanel16);

        jTabbedPane6.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jLabel59.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel59.setText("Materia:");

        jLblCarrera9.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera9.setText("Carrera:");

        jLblSemestre9.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre9.setText("Semestre:");

        jLblGrupo9.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo9.setText("Grupo:");

        jCmbGrupoED.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCmbGrupoED.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoEDFocusGained(evt);
            }
        });
        jCmbGrupoED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoEDActionPerformed(evt);
            }
        });

        jBtnBuscarED.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarED.setText("Buscar");
        jBtnBuscarED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarEDActionPerformed(evt);
            }
        });

        jCmbSemestreED.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCmbSemestreED.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreEDFocusGained(evt);
            }
        });
        jCmbSemestreED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreEDActionPerformed(evt);
            }
        });

        jCmbCarreraED.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCmbCarreraED.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraEDFocusGained(evt);
            }
        });
        jCmbCarreraED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraEDActionPerformed(evt);
            }
        });

        jCmbMateriaED.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCmbMateriaED.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaEDFocusGained(evt);
            }
        });
        jCmbMateriaED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaEDActionPerformed(evt);
            }
        });

        jLabel68.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel68.setText("Busqueda:");

        jTblEvaluacionD = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblEvaluacionD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblEvaluacionD.getTableHeader().setReorderingAllowed(false);
        jScrollPane15.setViewportView(jTblEvaluacionD);

        jLabel75.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel75.setText("Datos del evaluaci√≥n diagn√≥stica:");

        jBtnAgregarED.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarED.setText("Guardar");
        jBtnAgregarED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarEDActionPerformed(evt);
            }
        });

        jBtnCancelarED.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnCancelarED.setText("Cancelar");
        jBtnCancelarED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarEDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCmbMateriaED, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 1212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtnCancelarED, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnAgregarED, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel25Layout.createSequentialGroup()
                                .addComponent(jLabel59)
                                .addGap(72, 72, 72)
                                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCmbCarreraED, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblCarrera9))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCmbSemestreED, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblSemestre9))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel25Layout.createSequentialGroup()
                                        .addComponent(jCmbGrupoED, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBtnBuscarED))
                                    .addComponent(jLblGrupo9))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addComponent(jLabel75)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator39))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel25Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator45, javax.swing.GroupLayout.PREFERRED_SIZE, 1253, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel68)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jSeparator45, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addComponent(jLabel59)
                        .addGap(6, 6, 6)
                        .addComponent(jCmbMateriaED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel25Layout.createSequentialGroup()
                                .addComponent(jLblCarrera9)
                                .addGap(6, 6, 6)
                                .addComponent(jCmbCarreraED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel25Layout.createSequentialGroup()
                                .addComponent(jLblSemestre9)
                                .addGap(6, 6, 6)
                                .addComponent(jCmbSemestreED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel25Layout.createSequentialGroup()
                                .addComponent(jLblGrupo9)
                                .addGap(5, 5, 5)
                                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCmbGrupoED, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnBuscarED))))
                        .addGap(1, 1, 1)))
                .addGap(14, 14, 14)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel75)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator39, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addComponent(jBtnAgregarED)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnCancelarED))))
        );

        jTabbedPane6.addTab("Agregar", jPanel25);

        jLabel71.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel71.setText("Busqueda:");

        jCmbMateriaED1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaED1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaED1FocusGained(evt);
            }
        });
        jCmbMateriaED1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaED1ActionPerformed(evt);
            }
        });

        jCmbCarreraED1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraED1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraED1FocusGained(evt);
            }
        });
        jCmbCarreraED1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraED1ActionPerformed(evt);
            }
        });

        jLblCarrera10.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera10.setText("Carrera:");

        jLabel72.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel72.setText("Materia:");

        jLabel73.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel73.setText("Datos del evaluaci√≥n diagn√≥stica:");

        jBtnAgregarD3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarD3.setText("Actualizar");
        jBtnAgregarD3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarD3ActionPerformed(evt);
            }
        });

        jTblEvaluacionD1 = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblEvaluacionD1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblEvaluacionD1.getTableHeader().setReorderingAllowed(false);
        jScrollPane14.setViewportView(jTblEvaluacionD1);

        jCmbSemestreED1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreED1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreED1FocusGained(evt);
            }
        });
        jCmbSemestreED1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreED1ActionPerformed(evt);
            }
        });

        jCmbGrupoED1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoED1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoED1FocusGained(evt);
            }
        });
        jCmbGrupoED1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoED1ActionPerformed(evt);
            }
        });

        jBtnBuscarED1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarED1.setText("Buscar");
        jBtnBuscarED1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarED1ActionPerformed(evt);
            }
        });

        jLblSemestre10.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre10.setText("Semestre:");

        jLblGrupo10.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo10.setText("Grupo:");

        jLblPromedio.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblPromedio.setText("0");

        jLabel79.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel79.setText("Promedio:");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jSeparator37, javax.swing.GroupLayout.PREFERRED_SIZE, 1210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(jLabel73)
                        .addGap(4, 4, 4)
                        .addComponent(jSeparator38, javax.swing.GroupLayout.PREFERRED_SIZE, 992, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel79)
                        .addGap(10, 10, 10)
                        .addComponent(jLblPromedio))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 1204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jBtnAgregarD3))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel72))
                            .addComponent(jCmbMateriaED1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblCarrera10)
                            .addComponent(jCmbCarreraED1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblSemestre10)
                            .addComponent(jCmbSemestreED1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblGrupo10)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addComponent(jCmbGrupoED1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnBuscarED1)))))
                .addGap(10, 10, 10))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel71)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator37, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(jLabel72)
                        .addGap(6, 6, 6)
                        .addComponent(jCmbMateriaED1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addComponent(jLblCarrera10)
                                .addGap(6, 6, 6)
                                .addComponent(jCmbCarreraED1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel21Layout.createSequentialGroup()
                                        .addComponent(jLblSemestre10)
                                        .addGap(6, 6, 6)
                                        .addComponent(jCmbSemestreED1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel21Layout.createSequentialGroup()
                                        .addComponent(jLblGrupo10)
                                        .addGap(5, 5, 5)
                                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jCmbGrupoED1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jBtnBuscarED1))
                                        .addGap(1, 1, 1)))
                                .addGap(2, 2, 2)))
                        .addGap(2, 2, 2)))
                .addGap(11, 11, 11)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel73)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator38, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel79)
                    .addComponent(jLblPromedio))
                .addGap(12, 12, 12)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnAgregarD3)))
        );

        jTabbedPane6.addTab("Consulta", jPanel21);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane6)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jTabbedPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Unidad.addTab("Evaluaci√≥n diagn√≥stica", jPanel19);

        jLabel81.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel81.setText("Busqueda:");

        jLabel82.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel82.setText("Materia:");

        jLblCarrera12.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera12.setText("Carrera:");

        jLblSemestre12.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre12.setText("Semestre:");

        jLblGrupo12.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo12.setText("Grupo:");

        jCmbGrupoS.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoSFocusGained(evt);
            }
        });
        jCmbGrupoS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoSActionPerformed(evt);
            }
        });

        jCmbSemestreS.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreSFocusGained(evt);
            }
        });
        jCmbSemestreS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreSActionPerformed(evt);
            }
        });

        jCmbCarreraS.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraSFocusGained(evt);
            }
        });
        jCmbCarreraS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraSActionPerformed(evt);
            }
        });

        jCmbMateriaS.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaSFocusGained(evt);
            }
        });
        jCmbMateriaS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaSActionPerformed(evt);
            }
        });

        jBtnBuscarS.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarS.setText("Buscar");
        jBtnBuscarS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarSActionPerformed(evt);
            }
        });

        jLabel83.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel83.setText("Datos semestre:");

        jTblSemestre = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, false};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblSemestre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblSemestre.getTableHeader().setReorderingAllowed(false);
        jScrollPane17.setViewportView(jTblSemestre);

        jBtnMostrar.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnMostrar.setText("Mostrar");
        jBtnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnMostrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addComponent(jLabel83)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator44))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbMateriaS, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel82)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbCarreraS, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblCarrera12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbSemestreS, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblSemestre12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblGrupo12)
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addComponent(jCmbGrupoS, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnBuscarS)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnMostrar)))
                        .addGap(0, 246, Short.MAX_VALUE))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator43)))
                .addContainerGap())
            .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                    .addGap(7, 7, 7)
                    .addComponent(jScrollPane17)
                    .addContainerGap()))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator43, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel81))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addComponent(jLabel82)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbMateriaS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addComponent(jLblCarrera12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbCarreraS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblSemestre12)
                            .addComponent(jLblGrupo12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbSemestreS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbGrupoS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnBuscarS)
                            .addComponent(jBtnMostrar))
                        .addGap(1, 1, 1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel83)
                    .addComponent(jSeparator44, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(520, Short.MAX_VALUE))
            .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel24Layout.createSequentialGroup()
                    .addGap(129, 129, 129)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(32, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(219, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        Unidad.addTab("Semestral", jPanel20);

        jTabbedPane1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel10.setText("Busqueda:");

        jLblMateria1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblMateria1.setText("Materia:");

        jCmbMateriaAc1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaAc1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaAc1FocusGained(evt);
            }
        });
        jCmbMateriaAc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaAc1ActionPerformed(evt);
            }
        });

        jLblCarrera13.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblCarrera13.setText("Carrera:");

        jCmbCarreraAc1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraAc1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraAc1FocusGained(evt);
            }
        });
        jCmbCarreraAc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraAc1ActionPerformed(evt);
            }
        });

        jLblSemestre13.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblSemestre13.setText("Semestre:");

        jCmbSemestreAc1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreAc1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreAc1FocusGained(evt);
            }
        });
        jCmbSemestreAc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreAc1ActionPerformed(evt);
            }
        });

        jLblGrupo13.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblGrupo13.setText("Grupo:");

        jCmbGrupoAc1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoAc1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoAc1FocusGained(evt);
            }
        });
        jCmbGrupoAc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoAc1ActionPerformed(evt);
            }
        });

        jBtnBuscarAc1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarAc1.setText("Buscar");
        jBtnBuscarAc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarAc1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel11.setText("Datos de la actitud:");

        jLblUnidad1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLblUnidad1.setText("Unidad:");

        jCmbUnidadAc1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadAc1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel26.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jLabel26.setText("Seleccione una fecha:");

        jBtnAgregarAc1.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarAc1.setText("Agregar");
        jBtnAgregarAc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarAc1ActionPerformed(evt);
            }
        });

        jTblActitudA = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblActitudA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblActitudA.getTableHeader().setReorderingAllowed(false);
        jScrollPane13.setViewportView(jTblActitudA);

        jBtnAgregarA.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnAgregarA.setText("Guardar");
        jBtnAgregarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarAActionPerformed(evt);
            }
        });

        jBtnCancelarA.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnCancelarA.setText("Cancelar");
        jBtnCancelarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator36))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel26Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLblMateria1))
                            .addComponent(jCmbMateriaAc1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel26Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLblCarrera13))
                            .addComponent(jCmbCarreraAc1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbSemestreAc1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblSemestre13))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel26Layout.createSequentialGroup()
                                .addComponent(jCmbGrupoAc1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnBuscarAc1))
                            .addComponent(jLblGrupo13))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator42))))
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator46)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel26Layout.createSequentialGroup()
                                .addComponent(jLblUnidad1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCmbUnidadAc1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel26Layout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDtcUnidadAc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jBtnAgregarAc1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(238, 238, 238)
                        .addComponent(jBtnAgregarA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 214, Short.MAX_VALUE)
                        .addComponent(jBtnCancelarA)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jSeparator36, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLblMateria1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbMateriaAc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLblCarrera13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbCarreraAc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLblSemestre13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbSemestreAc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLblGrupo13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbGrupoAc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnBuscarAc1))
                        .addGap(1, 1, 1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jSeparator42, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblUnidad1)
                            .addComponent(jCmbUnidadAc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26)
                            .addComponent(jDtcUnidadAc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator46, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnAgregarAc1)
                            .addComponent(jBtnAgregarA)
                            .addComponent(jBtnCancelarA)))
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Agregar", jPanel26);

        jLabel12.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel12.setText("Busqueda:");

        jLblMateria2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLblMateria2.setText("Materia:");

        jCmbMateriaAcM.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbMateriaAcM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbMateriaAcMFocusGained(evt);
            }
        });
        jCmbMateriaAcM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbMateriaAcMActionPerformed(evt);
            }
        });

        jCmbCarreraAcM.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbCarreraAcM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbCarreraAcMFocusGained(evt);
            }
        });
        jCmbCarreraAcM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbCarreraAcMActionPerformed(evt);
            }
        });

        jLblCarrera14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLblCarrera14.setText("Carrera:");

        jLblSemestre14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLblSemestre14.setText("Semestre:");

        jCmbSemestreAcM.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbSemestreAcM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbSemestreAcMFocusGained(evt);
            }
        });
        jCmbSemestreAcM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbSemestreAcMActionPerformed(evt);
            }
        });

        jLblGrupo14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLblGrupo14.setText("Grupo:");

        jCmbGrupoAcM.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbGrupoAcM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbGrupoAcMFocusGained(evt);
            }
        });
        jCmbGrupoAcM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbGrupoAcMActionPerformed(evt);
            }
        });

        jBtnBuscarAcM.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnBuscarAcM.setText("Buscar");
        jBtnBuscarAcM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarAcMActionPerformed(evt);
            }
        });

        jLabel69.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        jLabel69.setText("Datos de la actitud:");

        jTblActitudM = new javax.swing.JTable(){
            private boolean[] editable = {false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true};
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return editable[colIndex]; //Disallow the editing of any cell
            }
        };
        jTblActitudM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTblActitudM.getTableHeader().setResizingAllowed(false);
        jTblActitudM.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTblActitudM);

        jBtnActualizarAcM.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jBtnActualizarAcM.setText("Actualizar");
        jBtnActualizarAcM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnActualizarAcMActionPerformed(evt);
            }
        });

        jCmbUnidadAcM.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jCmbUnidadAcM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCmbUnidadAcMFocusGained(evt);
            }
        });
        jCmbUnidadAcM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbUnidadAcMActionPerformed(evt);
            }
        });

        jLblGrupo15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLblGrupo15.setText("Unidad");

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLabel69)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator48))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator47))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel27Layout.createSequentialGroup()
                                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCmbMateriaAcM, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel27Layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(jLblMateria2)))
                                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel27Layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(jLblCarrera14))
                                    .addGroup(jPanel27Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jCmbCarreraAcM, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblSemestre14)
                                    .addComponent(jCmbSemestreAcM, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblGrupo14)
                                    .addComponent(jCmbGrupoAcM, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblGrupo15)
                                    .addGroup(jPanel27Layout.createSequentialGroup()
                                        .addComponent(jCmbUnidadAcM, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBtnBuscarAcM)))
                                .addGap(0, 546, Short.MAX_VALUE))
                            .addGroup(jPanel27Layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtnActualizarAcM)))
                        .addContainerGap())))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jSeparator47, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLblMateria2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbMateriaAcM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbCarreraAcM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLblGrupo14)
                        .addGap(31, 31, 31))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLblSemestre14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbGrupoAcM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbSemestreAcM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLblCarrera14)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLblGrupo15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCmbUnidadAcM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnBuscarAcM))))
                .addGap(17, 17, 17)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel69)
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jSeparator48, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jBtnActualizarAcM)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Modificar", jPanel27);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        Unidad.addTab("Actitud", jPanel23);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "L.S'SOFT", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/24x24/folder.png"))); // NOI18N
        jMenu3.setText("Archivo");
        jMenu3.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N

        jMICargar.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jMICargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/24x24/csv.png"))); // NOI18N
        jMICargar.setText("Cargar");
        jMICargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICargarActionPerformed(evt);
            }
        });
        jMenu3.add(jMICargar);

        jMiSalir.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jMiSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/png/24x24/icon.png"))); // NOI18N
        jMiSalir.setText("Salir");
        jMiSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMiSalirActionPerformed(evt);
            }
        });
        jMenu3.add(jMiSalir);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Unidad)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Unidad, javax.swing.GroupLayout.PREFERRED_SIZE, 632, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void LLenarTablaLista() throws SQLException {
        BD mBD = new BD();
        List<Lista> lista = mBD.consultarLista();

        Object[] encabezado = {"Lista", "Materia", "Grupo", "Semestre", "Carrera"};

        DefaultTableModel modelo = new DefaultTableModel(null, encabezado);

        for (Lista actual : lista) {
            Object[] fila = {actual.getIdLista(), actual.getMateria(), actual.getGrupo(), actual.getSemestre(), actual.getCarrera()};
            modelo.addRow(fila);
        }

        this.jTblConsultarListaLs.setModel(modelo);
        jTblConsultarListaLs.getColumnModel().getColumn(0).setPreferredWidth(11);
        jTblConsultarListaLs.getColumnModel().getColumn(1).setPreferredWidth(160);
        jTblConsultarListaLs.getColumnModel().getColumn(2).setPreferredWidth(35);
    }

    public void LlenarTablaActitud() throws SQLException {
        try {
            //Agregar Actitud
            if ((jCmbMateriaAc1.getItemCount() == 0) | (jCmbCarreraAc1.getItemCount() == 0) | (jCmbSemestreAc1.getItemCount() == 0) | (jCmbGrupoAc1.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                BD mBD = new BD();
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAc = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDAc));
                int cont = 1;

                if (lista.isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblActitudA.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblActitudA.getModel();
                    int a = jTblActitudA.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblActitudA.setModel(modelo);
                } else {
                    //Mostrar la consulta alumno
                    Object[] encabezado = {"No", "NC", "Nombre"};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual : lista) {

                        Object[] fila = {cont, actual.getNC(), actual.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }
                    jTblActitudA.setModel(modelo);
                    this.jBtnAgregarA.setVisible(true);
                    jCmbUnidadAc1.setEnabled(true);
                    jDtcUnidadAc1.setEnabled(true);
                    jBtnAgregarAc1.setEnabled(true);
                    jBtnAgregarA.setVisible(false);
                }
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }

    public void LlenarTablaActitudM() throws SQLException {
        try {
            //Modificacion actitud
            if ((jCmbMateriaAcM.getItemCount() == 0) | (jCmbCarreraAcM.getItemCount() == 0) | (jCmbSemestreAcM.getItemCount() == 0) | (jCmbGrupoAcM.getItemCount() == 0) | (jCmbUnidadAcM.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                BD mBD = new BD();
                int q = 3;
                int z = 0;
                String Act = "";
                String Fecha = "";
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAc = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDAc));
                int cont = 1;
                if (lista.isEmpty()) {
                    jBtnActualizarAcM.setEnabled(false);
                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblActitudM.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblActitudM.getModel();
                    int a = jTblActitudM.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblActitudM.setModel(modelo);
                } else {
                    jBtnActualizarAcM.setEnabled(true);
                    Object[] encabezado = {"No", "NC", "Nombre"};

                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual1 : lista) {
                        Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }

                    List<Actitud> listaActitud = mBD.consultarFechas(Integer.parseInt(IDAc));
                    for (Actitud actual2 : listaActitud) {
                        Fecha = String.valueOf(actual2.getFecha());
                        List< Actitud> Lista = mBD.consultarFechasCovertir(Integer.parseInt(IDAc), Fecha);
                        for (Actitud actual3 : Lista) {
                            modelo.addColumn(String.valueOf(actual3.getFecha()));
                        }
                        List<Actitud> Lista2 = mBD.consultarAsistencia(Fecha, Integer.parseInt(IDAc));
                        for (Actitud actual4 : Lista2) {
                            modelo.setValueAt(actual4.getAsistencia(), z, q);
                            z++;
                        }
                        z = 0;
                        q++;

                    }
                    jTblActitudM.setModel(modelo);
                }
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }

    public void LLenarTablaAlumno() throws SQLException {
        //Consulta alumno
        if ((jCmbMateriaAlm.getItemCount() == 0) | (jCmbCarreraAlm.getItemCount() == 0) | (jCmbSemestreAlm.getItemCount() == 0) | (jCmbGrupoAlm.getItemCount() == 0)) {
            JOptionPane.showMessageDialog(rootPane, "No es posible realizar la busqueda,\nPor favor llenar todos los campos");
        }
        BD mBD = new BD();
        List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
        for (Lista actual : mLista) {
            IDAl = String.valueOf(actual.getIdLista());
        }
        System.out.println(IDAl);
        List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDAl));
        int cont = 1;

        if (lista.isEmpty()) {
            jBtnModificarAlm.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vacia \n por favor seleccione otra.");
            jTblConsultarAlumno.setTableHeader(null);
            DefaultTableModel tb = (DefaultTableModel) jTblConsultarAlumno.getModel();
            int a = jTblConsultarAlumno.getRowCount() - 1;
            for (int i = a; i >= 0; i--) {
                tb.removeRow(tb.getRowCount() - 1);
            }

            Object[] encabezado = {};
            DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
            jTxtNCAlm.setText(null);
            jTxtNombreAlm.setText(null);
            jTblConsultarAlumno.setModel(modelo);

        } else {
            jBtnModificarAlm.setEnabled(true);
            jTxtNCAlm.setEnabled(true);
            jTxtNombreAlm.setEnabled(true);
            Object[] encabezado = {"No", "NC", "Nombre"};
            DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
            for (Alumno actual : lista) {
                Object[] fila = {cont, actual.getNC(), actual.getNombre()};
                modelo.addRow(fila);
                cont++;
            }
            this.jTblConsultarAlumno.setModel(modelo);
        }
    }

    public void LimpiarCamposLista() {
        this.TxtCarreraLs.setText(null);
        this.TxtGrupoLs.setText(null);
        this.TxtMateriaLs.setText(null);
        this.TxtSemestreLs.setText(null);
    }

    public void LlenarTablaDesempe√±o1() throws SQLException {
        int q = 3;
        int z = 0;
        String Unidad = this.jCmbUnidadD1.getSelectedItem().toString();

        BD mBD = new BD();
        String Desem = "";
        List<Lista> mLista;
        try {
            mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
            for (Lista actual : mLista) {
                IDDes = String.valueOf(actual.getIdLista());
            }
            List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDDes));
            int cont = 1;

            Object[] encabezado = {"No", "NC", "Nombre"};

            DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
            for (Alumno actual1 : lista) {
                Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                modelo.addRow(fila);
                cont++;
            }

            List<Desempe√±o> lista2 = mBD.consultarListaTrabajos(Integer.parseInt(IDDes), Unidad);

            for (Desempe√±o actual : lista2) {
                modelo.addColumn(String.valueOf(actual.getTrabajo()));
                List<Desempe√±o> lista3 = mBD.consultarDesempenoCal(String.valueOf(actual.getTrabajo()), Unidad);
                for (Desempe√±o actual2 : lista3) {
                    modelo.setValueAt(actual2.getCalificacion(), z, q);
                    z++;
                }
                z = 0;
                q++;
            }
            jTblDesempe√±o1.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jMICargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICargarActionPerformed
        // TODO add your handling code here:
        new FrmBusquedaLista(this, true).setVisible(true);
    }//GEN-LAST:event_jMICargarActionPerformed

    private void jMniEliminarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMniEliminarListaActionPerformed
        // TODO add your handling code here:
        BD mBD = new BD();
        String IDLs = "";
        int fila = this.jTblConsultarListaLs.getSelectedRow();

        try {
            if (fila >= 0) {
                int IDLista = (int) jTblConsultarListaLs.getValueAt(fila, 0);
                String Materia = (String) jTblConsultarListaLs.getValueAt(fila, 1);
                String Grupo = (String) jTblConsultarListaLs.getValueAt(fila, 2);
                int Semestre = (int) jTblConsultarListaLs.getValueAt(fila, 3);
                String Carrera = (String) jTblConsultarListaLs.getValueAt(fila, 4);

                List<Lista> mLista = mBD.ConsultaIDLista(Materia, Grupo, Semestre, Carrera);
                for (Lista actual : mLista) {
                    IDLs = String.valueOf(actual.getIdLista());
                    System.out.println(IDLs);
                }
            }
            mBD.eliminarlista(Integer.parseInt(IDLs));
            this.LimpiarCamposLista();
            JOptionPane.showMessageDialog(null, "Lista Eliminada");
            this.LLenarTablaLista();
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_jMniEliminarListaActionPerformed

    private void jMiSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMiSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMiSalirActionPerformed

    private void jBtnBuscarSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarSActionPerformed
        String Unidad = "";
        String Nombre;
        int cont2 = 0;
        int NC;
        int IdA = 0;
        int SumaD = 0;
        int PromedioD = 0;
        int SumaC = 0;
        int PromedioC = 0;
        int SumaP = 0;
        int PromedioP = 0;
        int x = 3;
        double PromedioA = 0;
        int cont1 = 0;
        double SumaA = 0;

        BD mBD = new BD();
        List<Lista> mLista;
        try {
            if ((jCmbMateriaS.getItemCount() == 0) | (jCmbCarreraS.getItemCount() == 0) | (jCmbSemestreS.getItemCount() == 0) | (jCmbGrupoS.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDDes = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDDes));
                int cont = 1;
                if (lista.isEmpty()) {

                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblSemestre.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblSemestre.getModel();
                    int a = jTblSemestre.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblSemestre.setModel(modelo);

                } else {
                    Object[] encabezado = {"No", "NC", "Nombre"};

                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual1 : lista) {

                        Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                        modelo.addRow(fila);
                        cont++;

                    }

                    jTblSemestre.setModel(modelo);
                    jBtnMostrar.setEnabled(true);
                    jBtnBuscarS.setEnabled(false);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarSActionPerformed

    private void jCmbMateriaSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaSActionPerformed
        Materia = String.valueOf(this.jCmbMateriaS.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaSActionPerformed

    private void jCmbMateriaSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaSFocusGained
        BD mBD = new BD();
        this.jCmbMateriaS.removeAllItems();
        this.jCmbCarreraS.removeAllItems();
        this.jCmbSemestreS.removeAllItems();
        this.jCmbGrupoS.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaS.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaSFocusGained

    private void jCmbCarreraSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraSActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraS.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraSActionPerformed

    private void jCmbCarreraSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraSFocusGained
        BD mBD = new BD();
        this.jCmbCarreraS.removeAllItems();
        this.jCmbSemestreS.removeAllItems();
        this.jCmbGrupoS.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaS.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraS.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraSFocusGained

    private void jCmbSemestreSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreSActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreS.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreSActionPerformed

    private void jCmbSemestreSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreSFocusGained
        BD mBD = new BD();
        this.jCmbSemestreS.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaS.getSelectedItem()), String.valueOf(this.jCmbCarreraS.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreS.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreSFocusGained

    private void jCmbGrupoSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoSActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoS.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoSActionPerformed

    private void jCmbGrupoSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoSFocusGained
        BD mBD = new BD();
        this.jCmbGrupoS.removeAllItems();
        try {

            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaS.getSelectedItem()), String.valueOf(this.jCmbCarreraS.getSelectedItem()), Semestre);

            for (Lista actual : mLista) {
                this.jCmbGrupoS.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_jCmbGrupoSFocusGained

    private void jCmbUnidadUFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbUnidadUFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbUnidadUFocusGained

    private void jBtnBuscarUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarUActionPerformed
        int q = 3;
        int z = 0;
        String Unidad = this.jCmbUnidadU.getSelectedItem().toString();
        String Nombre;
        int NC;
        int IdA = 0;
        int numF = 3;
        int SumaD = 0;
        int PromedioD = 0;
        int SumaC = 0;
        int PromedioC = 0;
        int SumaP = 0;
        int PromedioP = 0;
        double PromedioA = 0;
        int cont1 = 0;
        double SumaA = 0;

        BD mBD = new BD();
        String Desem = "";
        List<Lista> mLista;
        try {
            if ((jCmbMateriaU.getItemCount() == 0) | (jCmbCarreraU.getItemCount() == 0) | (jCmbSemestreU.getItemCount() == 0) | (jCmbGrupoU.getItemCount() == 0) | (jCmbUnidadU.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDDes = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDDes));
                int cont = 1;
                if (lista.isEmpty()) {

                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblUnidad.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblUnidad.getModel();
                    int a = jTblUnidad.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblUnidad.setModel(modelo);

                } else {
                    Object[] encabezado = {"No", "NC", "Nombre", "Conocimiento 35%", "Producto 35%", "Desempe√±o 20%", "Actitud 10%", "Total"};

                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual1 : lista) {
                        Nombre = actual1.getNombre();
                        NC = actual1.getNC();

                        List<Alumno> Lista = mBD.ConsultaIDAlumno(NC, Nombre);
                        for (Alumno actual2 : Lista) {
                            IdA = actual2.getIdAlumno();
                        }

                        //Conocimiento
                        List<Conocimiento> Lista3 = mBD.ConsultaCalCon(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                        if (Lista3.isEmpty()) {
                            PromedioC = 0;
                        } else {
                            SumaC = 0;
                            for (Conocimiento actual4 : Lista3) {
                                SumaC = actual4.getCalificacion();
                            }
                            int Puntos = 0;
                            List<PuntosExtras> Lista4 = mBD.ConsultaCalExtras(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                            if (Lista4.isEmpty()) {
                                Puntos = 0;
                            } else {
                                for (PuntosExtras actual5 : Lista4) {
                                    Puntos = actual5.getPuntos() + Puntos;
                                }
                            }
                            PromedioC = SumaC + Puntos;

                            if (PromedioC > 100) {
                                PromedioC = 100;
                            }

                        }

                        //Producto
                        List<Producto> Lista5 = mBD.ConsultaCalProd(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                        if (Lista5.isEmpty()) {
                            PromedioP = 0;
                        } else {
                            int numP = 0;
                            SumaP = 0;
                            for (Producto actual6 : Lista5) {
                                SumaP = actual6.getCalificacion() + SumaP;
                                numP++;
                            }
                            PromedioP = SumaP / numP;

                        }

                        //Desempeno
                        List<Desempe√±o> Lista2 = mBD.ConsultaCalDes(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                        if (Lista2.isEmpty()) {
                            PromedioD = 0;
                        } else {
                            int numD = 0;
                            SumaD = 0;
                            for (Desempe√±o actual3 : Lista2) {
                                SumaD = actual3.getCalificacion() + SumaD;
                                numD++;
                            }
                            PromedioD = SumaD / numD;

                        }
                        //Actitud

                        List<Actitud> Lista6 = mBD.ConsultaAsistencia(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                        if (Lista6.isEmpty()) {
                            PromedioA = 0;
                        } else {
                            double Sum = 0.0;

                            SumaA = 0;
                            cont1 = 0;
                            for (Actitud actual7 : Lista6) {

                                SumaA = actual7.getAsistencia() + SumaA;
                                cont1++;

                            }
                            System.out.println(cont1);
                            System.out.println(SumaA);
                            Sum = SumaA / cont1;
                            System.out.println(cont1);
                            PromedioA = Sum * 100;
                        }

                        //Total
                        double PromedioUni = 0;
                        PromedioUni = (PromedioC * 0.35) + (PromedioP * 0.35) + (PromedioD * 0.20) + (PromedioA * 0.10);

                        Object[] fila = {cont, actual1.getNC(), actual1.getNombre(), PromedioC, PromedioP, PromedioD, PromedioA, (int) PromedioUni};
                        modelo.addRow(fila);
                        cont++;
                    }

                    jTblUnidad.setModel(modelo);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarUActionPerformed

    private void jCmbMateriaUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaUActionPerformed
        Materia = String.valueOf(this.jCmbMateriaU.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaUActionPerformed

    private void jCmbMateriaUFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaUFocusGained
        BD mBD = new BD();
        this.jCmbMateriaU.removeAllItems();
        this.jCmbCarreraU.removeAllItems();
        this.jCmbSemestreU.removeAllItems();
        this.jCmbGrupoU.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaU.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaUFocusGained

    private void jCmbCarreraUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraUActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraU.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraUActionPerformed

    private void jCmbCarreraUFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraUFocusGained
        BD mBD = new BD();
        this.jCmbCarreraU.removeAllItems();
        this.jCmbSemestreU.removeAllItems();
        this.jCmbGrupoU.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaU.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraU.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraUFocusGained

    private void jCmbSemestreUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreUActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreU.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreUActionPerformed

    private void jCmbSemestreUFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreUFocusGained
        BD mBD = new BD();
        this.jCmbSemestreU.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaU.getSelectedItem()), String.valueOf(this.jCmbCarreraU.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreU.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreUFocusGained

    private void jCmbGrupoUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoUActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoU.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoUActionPerformed

    private void jCmbGrupoUFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoUFocusGained
        BD mBD = new BD();
        this.jCmbGrupoU.removeAllItems();
        try {

            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaU.getSelectedItem()), String.valueOf(this.jCmbCarreraU.getSelectedItem()), Semestre);

            for (Lista actual : mLista) {
                this.jCmbGrupoU.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_jCmbGrupoUFocusGained

    private void jBtnBuscarPE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarPE1ActionPerformed
        int q = 3;
        int z = 0;
        String Unidad = this.jCmbUnidadPE1.getSelectedItem().toString();

        BD mBD = new BD();
        String Desem = "";
        List<Lista> mLista;
        try {
            if ((jCmbMateriaPE1.getItemCount() == 0) | (jCmbCarreraPE1.getItemCount() == 0) | (jCmbSemestrePE1.getItemCount() == 0) | (jCmbGrupoPE1.getItemCount() == 0) | (jCmbUnidadPE1.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDDes = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.ConsultaAlumnoPuntos(Integer.parseInt(IDDes));
                int cont = 1;
                if (lista.isEmpty()) {
                    jBtnAgregarPE1.setEnabled(false);
                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblPuntosExtras1.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblPuntosExtras1.getModel();
                    int a = jTblPuntosExtras1.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblPuntosExtras1.setModel(modelo);

                } else {
                    jBtnAgregarPE1.setEnabled(true);
                    Object[] encabezado = {"No", "NC", "Nombre"};

                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual1 : lista) {
                        Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }

                    List<PuntosExtras> lista2 = mBD.ConsultaPuntosExtrasUnidad(Integer.parseInt(IDDes));

                    for (PuntosExtras actual : lista2) {
                        modelo.addColumn(String.valueOf(actual.getUnidad()));
                        List<PuntosExtras> lista3 = mBD.ConsultaPuntosExtrasPuntos(Integer.parseInt(IDDes), String.valueOf(Unidad));
                        for (PuntosExtras actual2 : lista3) {
                            modelo.setValueAt(actual2.getPuntos(), z, q);
                            z++;
                        }
                        z = 0;
                        q++;
                    }
                    jTblPuntosExtras1.setModel(modelo);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarPE1ActionPerformed

    private void jCmbGrupoPE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoPE1ActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoPE1.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoPE1ActionPerformed

    private void jCmbGrupoPE1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoPE1FocusGained
        BD mBD = new BD();
        this.jCmbGrupoPE1.removeAllItems();
        try {

            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaPE1.getSelectedItem()), String.valueOf(this.jCmbCarreraPE1.getSelectedItem()), Semestre);

            for (Lista actual : mLista) {
                this.jCmbGrupoPE1.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_jCmbGrupoPE1FocusGained

    private void jCmbSemestrePE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestrePE1ActionPerformed
        Semestre = String.valueOf(this.jCmbSemestrePE1.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestrePE1ActionPerformed

    private void jCmbSemestrePE1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestrePE1FocusGained
        BD mBD = new BD();
        this.jCmbSemestrePE1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaPE1.getSelectedItem()), String.valueOf(this.jCmbCarreraPE1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestrePE1.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestrePE1FocusGained

    private void jBtnAgregarPE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarPE1ActionPerformed
        try {
            BD mBD = new BD();
            String Unidad = this.jCmbUnidadPE1.getSelectedItem().toString();
            int calificacion;
            String Nombre;
            int NC;
            int IdD = 0;
            int IdA = 0;
            int cont = 0;

            PuntosExtras mPuntosExtras = new PuntosExtras();
            List<PuntosExtras> lista2 = mBD.ConsultaPuntosExtrasUnidad(Integer.parseInt(IDDes));

            for (PuntosExtras actual : lista2) {
                cont++;
            }
            int d = 3 + cont;
            for (int j = 3; j < d; j++) {
                for (int i = 0; i < jTblPuntosExtras1.getRowCount(); i++) {
                    DefaultTableModel modelo = (DefaultTableModel) jTblPuntosExtras1.getModel();
                    JTableHeader th = jTblPuntosExtras1.getTableHeader();
                    TableColumnModel tcm = th.getColumnModel();
                    TableColumn tcmn = tcm.getColumn(j);
                    tcmn.getHeaderValue();

                    System.out.println(tcmn.getHeaderValue().toString());

                    calificacion = Integer.parseInt(jTblPuntosExtras1.getValueAt(i, j).toString());
                    Nombre = jTblPuntosExtras1.getValueAt(i, 2).toString();
                    NC = Integer.parseInt(jTblPuntosExtras1.getValueAt(i, 1).toString());

                    List<Alumno> mLista3 = mBD.ConsultaIDAlumno(NC, Nombre);
                    for (Alumno actual3 : mLista3) {
                        IdA = actual3.getIdAlumno();
                    }

                    System.out.println(calificacion);
                    List<PuntosExtras> mLista2 = mBD.ConsultaIDPuntosExtras(tcmn.getHeaderValue().toString(), IdA);
                    for (PuntosExtras actual2 : mLista2) {
                        IdD = actual2.getIdPuntosExtras();
                    }

                    System.out.println(IdD);
                    mPuntosExtras.setPuntos(calificacion);
                    mPuntosExtras.setIdPuntosExtras(IdD);
                    mPuntosExtras.setUnidad(Integer.parseInt(tcmn.getHeaderValue().toString()));
                    mBD.modificarPuntosExtras(mPuntosExtras);
                }
            }
            JOptionPane.showMessageDialog(null, "Puntos extras actualizados");
            LlenarTablaDesempe√±o1();
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnAgregarPE1ActionPerformed

    private void jCmbUnidadPE1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbUnidadPE1FocusGained
        BD mBD = new BD();
        this.jCmbUnidadPE1.removeAllItems();
        try {
            List<PuntosExtras> mLista = mBD.ConsultaPuntosExtrasUnidad1();
            for (PuntosExtras actual : mLista) {
                this.jCmbUnidadPE1.addItem(String.valueOf(actual.getUnidad()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbUnidadPE1FocusGained

    private void jCmbCarreraPE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraPE1ActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraPE1.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraPE1ActionPerformed

    private void jCmbCarreraPE1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraPE1FocusGained
        BD mBD = new BD();
        this.jCmbCarreraPE1.removeAllItems();
        this.jCmbSemestrePE1.removeAllItems();
        this.jCmbGrupoPE1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaPE1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraPE1.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraPE1FocusGained

    private void jCmbMateriaPE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaPE1ActionPerformed
        Materia = String.valueOf(this.jCmbMateriaPE1.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaPE1ActionPerformed

    private void jCmbMateriaPE1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaPE1FocusGained
        BD mBD = new BD();
        this.jCmbMateriaPE1.removeAllItems();
        this.jCmbCarreraPE1.removeAllItems();
        this.jCmbSemestrePE1.removeAllItems();
        this.jCmbGrupoPE1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaPE1.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaPE1FocusGained

    private void jTxtPuntosExtrasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtPuntosExtrasKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9')) && (caracter != KeyEvent.VK_BACK_SPACE)
                && (caracter != '-')) {
            /* lo que deseo colocar aqui es si ya se pulso el caracter (.) el mismo no se pueda repetir*/
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo N√∫meros");
        }
    }//GEN-LAST:event_jTxtPuntosExtrasKeyTyped

    private void jTxtPuntosExtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtPuntosExtrasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtPuntosExtrasActionPerformed

    private void jTxtNombreAlmPEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtNombreAlmPEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtNombreAlmPEKeyTyped

    private void jTxtNombreAlmPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtNombreAlmPEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtNombreAlmPEActionPerformed

    private void jTxtNCAlmPEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtNCAlmPEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtNCAlmPEKeyTyped

    private void jBtnCancelarPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarPEActionPerformed
        jTblPuntosExtras.setTableHeader(null);
        DefaultTableModel tb = (DefaultTableModel) jTblPuntosExtras.getModel();
        int a = jTblPuntosExtras.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }

        Object[] encabezado = {};
        DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
        jTblPuntosExtras.setModel(modelo);
        this.jTxtNCAlmPE.setText("");
        this.jTxtNombreAlmPE.setText("");
        this.jCmbUnidadPE.setEnabled(false);
        this.jTxtPuntosExtras.setEnabled(false);
        this.jBtnGuardarPE.setEnabled(false);
        this.jBtnCancelarPE.setEnabled(false);
    }//GEN-LAST:event_jBtnCancelarPEActionPerformed

    private void jBtnGuardarPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGuardarPEActionPerformed
        int NC = Integer.parseInt(jTxtNCAlmPE.getText());
        String Nombre = jTxtNombreAlmPE.getText();
        String PuntosExtras = jTxtPuntosExtras.getText();
        BD mBD = new BD();
        int IdA = 0;
        if ((this.jTxtNCAlmPE.getText().equals("")) || (jTxtNombreAlmPE.getText().equals("")) || (jTxtPuntosExtras.getText().equals(""))) {
            JOptionPane.showMessageDialog(rootPane, "Hay campos vacios");
        } else {
            List<Alumno> mLista3;
            try {
                mLista3 = mBD.ConsultaIDAlumno(NC, Nombre);
                for (Alumno actual3 : mLista3) {
                    IdA = actual3.getIdAlumno();
                }
                PuntosExtras mPuntos = new PuntosExtras();
                mPuntos.setPuntos(Integer.parseInt(PuntosExtras));
                mPuntos.setUnidad(Integer.parseInt(jCmbUnidadPE.getSelectedItem().toString()));
                mBD.agregarPuntosExtras(mPuntos, IdA);
                JOptionPane.showMessageDialog(rootPane, "Puntos agregados con exito");

                this.jTxtPuntosExtras.setText("");
                Object[] encabezado1 = {};
                DefaultTableModel modelo1 = new DefaultTableModel(null, encabezado1);
                jTblPuntosExtras1.setModel(modelo1);

            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jBtnGuardarPEActionPerformed

    private void jTblPuntosExtrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblPuntosExtrasMouseClicked
        BD mBD = new BD();

        int fila = this.jTblPuntosExtras.getSelectedRow();
        if (fila >= 0) {
            int NC = (int) jTblPuntosExtras.getValueAt(fila, 1);
            String Nombre = (String) jTblPuntosExtras.getValueAt(fila, 2);

            this.jTxtNombreAlmPE.setText(Nombre);
            this.jTxtNCAlmPE.setText(String.valueOf(NC));
        }
    }//GEN-LAST:event_jTblPuntosExtrasMouseClicked

    private void jCmbMateriaPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaPEActionPerformed
        Materia = String.valueOf(this.jCmbMateriaPE.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaPEActionPerformed

    private void jCmbMateriaPEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaPEFocusGained
        BD mBD = new BD();
        this.jCmbMateriaPE.removeAllItems();
        this.jCmbCarreraPE.removeAllItems();
        this.jCmbSemestrePE.removeAllItems();
        this.jCmbGrupoPE.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaPE.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaPEFocusGained

    private void jCmbCarreraPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraPEActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraPE.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraPEActionPerformed

    private void jCmbCarreraPEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraPEFocusGained
        BD mBD = new BD();
        this.jCmbCarreraPE.removeAllItems();
        this.jCmbSemestrePE.removeAllItems();
        this.jCmbGrupoPE.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaPE.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraPE.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraPEFocusGained

    private void jCmbSemestrePEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestrePEActionPerformed
        Semestre = String.valueOf(this.jCmbSemestrePE.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestrePEActionPerformed

    private void jCmbSemestrePEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestrePEFocusGained
        BD mBD = new BD();
        this.jCmbSemestrePE.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaPE.getSelectedItem()), String.valueOf(this.jCmbCarreraPE.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestrePE.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestrePEFocusGained

    private void jBtnBuscarPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarPEActionPerformed
        try {
            if ((jCmbMateriaPE.getItemCount() == 0) | (jCmbCarreraPE.getItemCount() == 0) | (jCmbSemestrePE.getItemCount() == 0) | (jCmbGrupoPE.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                BD mBD = new BD();
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAl = String.valueOf(actual.getIdLista());
                }
                System.out.println(IDAl);
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDAl));
                int cont = 1;

                if (lista.isEmpty()) {

                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblPuntosExtras.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblPuntosExtras.getModel();
                    int a = jTblPuntosExtras.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblPuntosExtras.setModel(modelo);

                } else {
                    //Mostrar la consulta alumno
                    Object[] encabezado = {"No", "NC", "Nombre"};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual : lista) {
                        Object[] fila = {cont, actual.getNC(), actual.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }
                    this.jTblPuntosExtras.setModel(modelo);
                    this.jCmbUnidadPE.setEnabled(true);
                    this.jTxtPuntosExtras.setEnabled(true);
                    this.jBtnGuardarPE.setEnabled(true);
                    this.jBtnCancelarPE.setEnabled(true);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarPEActionPerformed

    private void jCmbGrupoPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoPEActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoPE.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoPEActionPerformed

    private void jCmbGrupoPEFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoPEFocusGained
        BD mBD = new BD();
        this.jCmbGrupoPE.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaPE.getSelectedItem()), String.valueOf(this.jCmbCarreraPE.getSelectedItem()), Semestre);
            for (Lista actual : mLista) {
                this.jCmbGrupoPE.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {
        }
    }//GEN-LAST:event_jCmbGrupoPEFocusGained

    private void jBtnBuscarD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarD1ActionPerformed
        int q = 3;
        int z = 0;
        String Unidad = this.jCmbUnidadD1.getSelectedItem().toString();

        BD mBD = new BD();
        String Desem = "";
        List<Lista> mLista;
        try {
            if ((jCmbMateriaD1.getItemCount() == 0) | (jCmbCarreraD1.getItemCount() == 0) | (jCmbSemestreD1.getItemCount() == 0) | (jCmbGrupoD1.getItemCount() == 0) | (jCmbUnidadD1.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDDes = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDDes));
                int cont = 1;
                if (lista.isEmpty()) {
                    jBtnAgregarD1.setEnabled(false);
                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblDesempe√±o1.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblDesempe√±o1.getModel();
                    int a = jTblDesempe√±o1.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblDesempe√±o1.setModel(modelo);

                } else {
                    jBtnAgregarD1.setEnabled(true);
                    Object[] encabezado = {"No", "NC", "Nombre"};

                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual1 : lista) {
                        Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }

                    List<Desempe√±o> lista2 = mBD.consultarListaTrabajos(Integer.parseInt(IDDes), Unidad);

                    for (Desempe√±o actual : lista2) {
                        modelo.addColumn(String.valueOf(actual.getTrabajo()));
                        List<Desempe√±o> lista3 = mBD.consultarDesempenoCal(String.valueOf(actual.getTrabajo()), Unidad);
                        for (Desempe√±o actual2 : lista3) {
                            modelo.setValueAt(actual2.getCalificacion(), z, q);
                            z++;
                        }
                        z = 0;
                        q++;
                    }
                    jTblDesempe√±o1.setModel(modelo);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarD1ActionPerformed

    private void jCmbGrupoD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoD1ActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoD1.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoD1ActionPerformed

    private void jCmbGrupoD1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoD1FocusGained
        BD mBD = new BD();
        this.jCmbGrupoD1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaD1.getSelectedItem()), String.valueOf(this.jCmbCarreraD1.getSelectedItem()), Semestre);
            for (Lista actual : mLista) {
                this.jCmbGrupoD1.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbGrupoD1FocusGained

    private void jCmbSemestreD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreD1ActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreD1.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreD1ActionPerformed

    private void jCmbSemestreD1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreD1FocusGained
        BD mBD = new BD();
        this.jCmbSemestreD1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaD1.getSelectedItem()), String.valueOf(this.jCmbCarreraD1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreD1.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreD1FocusGained

    private void jBtnAgregarD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarD1ActionPerformed
        try {
            BD mBD = new BD();
            String Unidad = this.jCmbUnidadD1.getSelectedItem().toString();
            int calificacion;
            String Nombre;
            int NC;
            int IdD = 0;
            int IdA = 0;
            int cont = 0;

            Desempe√±o mDesempe√±o = new Desempe√±o();
            List<Desempe√±o> lista2 = mBD.consultarListaTrabajos(Integer.parseInt(IDDes), Unidad);

            for (Desempe√±o actual : lista2) {
                cont++;
            }
            int d = 3 + cont;
            for (int j = 3; j < d; j++) {
                for (int i = 0; i < jTblDesempe√±o1.getRowCount(); i++) {
                    DefaultTableModel modelo = (DefaultTableModel) jTblDesempe√±o1.getModel();
                    JTableHeader th = jTblDesempe√±o1.getTableHeader();
                    TableColumnModel tcm = th.getColumnModel();
                    TableColumn tcmn = tcm.getColumn(j);
                    tcmn.getHeaderValue();

                    System.out.println(tcmn.getHeaderValue().toString());

                    calificacion = Integer.parseInt(jTblDesempe√±o1.getValueAt(i, j).toString());
                    Nombre = jTblDesempe√±o1.getValueAt(i, 2).toString();
                    NC = Integer.parseInt(jTblDesempe√±o1.getValueAt(i, 1).toString());

                    List<Alumno> mLista3 = mBD.ConsultaIDAlumno(NC, Nombre);
                    for (Alumno actual3 : mLista3) {
                        IdA = actual3.getIdAlumno();
                    }

                    System.out.println(calificacion);
                    List<Desempe√±o> mLista2 = mBD.ConsultaIDDesempe√±o(tcmn.getHeaderValue().toString(), IdA);
                    for (Desempe√±o actual2 : mLista2) {
                        IdD = actual2.getIdDesempe√±o();
                    }

                    System.out.println(IdD);
                    mDesempe√±o.setCalificacion(calificacion);
                    mDesempe√±o.setTrabajo(tcmn.getHeaderValue().toString());
                    mDesempe√±o.setIdDesempe√±o(IdD);
                    mBD.modificarDesempe√±o(mDesempe√±o);
                }
            }
            JOptionPane.showMessageDialog(null, "Desempe√±o(s) actualizado(s)");
            LlenarTablaDesempe√±o1();
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnAgregarD1ActionPerformed

    private void jCmbUnidadD1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbUnidadD1FocusGained
        BD mBD = new BD();
        this.jCmbUnidadD1.removeAllItems();
        try {
            List<Desempe√±o> mLista = mBD.ConsultaDUnidad();
            for (Desempe√±o actual : mLista) {
                this.jCmbUnidadD1.addItem(String.valueOf(actual.getUnidadD()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbUnidadD1FocusGained

    private void jCmbCarreraD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraD1ActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraD1.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraD1ActionPerformed

    private void jCmbCarreraD1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraD1FocusGained
        BD mBD = new BD();
        this.jCmbCarreraD1.removeAllItems();
        this.jCmbSemestreD1.removeAllItems();
        this.jCmbGrupoD1.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaD1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraD1.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraD1FocusGained

    private void jCmbMateriaD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaD1ActionPerformed
        Materia = String.valueOf(this.jCmbMateriaD1.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaD1ActionPerformed

    private void jCmbMateriaD1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaD1FocusGained
        BD mBD = new BD();
        this.jCmbMateriaD1.removeAllItems();
        this.jCmbCarreraD1.removeAllItems();
        this.jCmbSemestreD1.removeAllItems();
        this.jCmbGrupoD1.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaD1.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaD1FocusGained

    private void jBtnCancelarDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarDActionPerformed
        jTblDesempe√±o.setTableHeader(null);
        DefaultTableModel tb = (DefaultTableModel) jTblDesempe√±o.getModel();
        int a = jTblDesempe√±o.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }

        Object[] encabezado = {};
        DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
        jTblDesempe√±o.setModel(modelo);
        this.jBtnGuardarD.setEnabled(false);
        this.jBtnAgregarD.setEnabled(false);
        this.jCmbUnidadD.setEnabled(false);
        this.jTxtNombreTrabajo.setText("");
        this.jTxtNombreTrabajo.setEnabled(false);
        this.jBtnCancelarD.setEnabled(false);
    }//GEN-LAST:event_jBtnCancelarDActionPerformed

    private void jBtnGuardarDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGuardarDActionPerformed
        String Nombre;
        String NC;
        String Calificacion;
        String ID = "";
        BD mBD = new BD();
        String Unidad = this.jCmbUnidadD.getSelectedItem().toString();
        //Agregar desempe√±o
        boolean Vacio = true;
        try {
            for (int y = 0; y < jTblDesempe√±o.getRowCount(); y++) {
                if (jTblDesempe√±o.getValueAt(y, 3) == "" || jTblDesempe√±o.getValueAt(y, 3) == null) {
                    Vacio = false;
                }
                System.out.println(Vacio);
            }
            if (Vacio == true) {
                for (int i = 0; i < jTblDesempe√±o.getRowCount(); i++) {
                    Nombre = jTblDesempe√±o.getValueAt(i, 2).toString();
                    NC = jTblDesempe√±o.getValueAt(i, 1).toString();
                    List<Alumno> mLista = mBD.ConsultaIDAlumno(Integer.parseInt(NC), Nombre);
                    for (Alumno actual : mLista) {
                        ID = String.valueOf(actual.getIdAlumno());
                    }
                    System.out.println(Nombre);
                    Calificacion = jTblDesempe√±o.getValueAt(i, 3).toString();
                    Desempe√±o mDesempe√±o = new Desempe√±o();
                    mDesempe√±o.setCalificacion(Integer.parseInt(Calificacion));
                    mDesempe√±o.setTrabajo(Trabajo);
                    mDesempe√±o.setUnidadD(Unidad);
                    mBD.agregarDesempe√±o(mDesempe√±o, Integer.parseInt(ID));
                }

                JOptionPane.showMessageDialog(this, "Desempeno guardado");
                this.jBtnGuardarD.setVisible(false);
                this.jBtnCancelarD.setEnabled(false);
                this.jTxtNombreProducto.setText("");
                jTblDesempe√±o.setTableHeader(null);
                DefaultTableModel tb = (DefaultTableModel) jTblDesempe√±o.getModel();
                int a = jTblDesempe√±o.getRowCount() - 1;
                for (int i = a; i >= 0; i--) {
                    tb.removeRow(tb.getRowCount() - 1);
                }

                Object[] encabezado = {};
                DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                jTblDesempe√±o.setModel(modelo);

                /*jTblDesempe√±o1.setTableHeader(null);
                DefaultTableModel tb1 = (DefaultTableModel) jTblDesempe√±o1.getModel();
                int a1 = jTblDesempe√±o1.getRowCount() - 1;
                for (int i = a1; i >= 0; i--) {
                    tb.removeRow(tb.getRowCount() - 1);
                }*/
                Object[] encabezado1 = {};
                DefaultTableModel modelo1 = new DefaultTableModel(null, encabezado1);
                jTblDesempe√±o1.setModel(modelo1);

            } else if (Vacio == false) {
                JOptionPane.showMessageDialog(this, "Hay campo(s) vacio(s), favor de verificar");
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnGuardarDActionPerformed

    private void jBtnAgregarDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarDActionPerformed
        Trabajo = this.jTxtNombreTrabajo.getText();
        String Unidad = this.jCmbUnidadD.getSelectedItem().toString();
        BD mBD = new BD();
        String Trabajo2 = "";
        boolean a = false;
        List<Alumno> lista;

        System.out.println(Trabajo);
        if (!"".equals(Trabajo)) {
            try {
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAl = String.valueOf(actual.getIdLista());
                }

                List<Desempe√±o> listaD = mBD.consultarListaTrabajos(Integer.parseInt(IDAl), Unidad);

                for (Desempe√±o actual : listaD) {
                    Trabajo2 = String.valueOf(actual.getTrabajo());
                    System.out.println(Trabajo2);
                    if (Trabajo2.equals(jTxtNombreTrabajo.getText())) {
                        a = true;
                        System.out.println(Trabajo2 + "*");
                    }

                }

                if (a == false) {
                    lista = mBD.consultarAlumno(Integer.parseInt(IDAl));

                    int cont = 1;
                    //Mostrar la consulta alumno
                    Object[] encabezado = {"No", "NC", "Nombre", Trabajo};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual : lista) {

                        Object[] fila = {cont, actual.getNC(), actual.getNombre(), ""};
                        modelo.addRow(fila);
                        cont++;
                    }
                    this.jTblDesempe√±o.setModel(modelo);

                    this.jBtnAgregarD.setEnabled(false);
                    this.jCmbUnidadD.setEnabled(false);
                    this.jTxtNombreTrabajo.setEnabled(false);
                    this.jTxtNombreTrabajo.setText("");
                    this.jBtnGuardarD.setVisible(true);

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Existe un trabajo con ese nombre");
                }

            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "El trabajo no puede estar vacio");
        }
    }//GEN-LAST:event_jBtnAgregarDActionPerformed

    private void jCmbMateriaDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaDActionPerformed
        Materia = String.valueOf(this.jCmbMateriaD.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaDActionPerformed

    private void jCmbMateriaDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaDFocusGained
        BD mBD = new BD();
        this.jCmbMateriaD.removeAllItems();
        this.jCmbCarreraD.removeAllItems();
        this.jCmbSemestreD.removeAllItems();
        this.jCmbGrupoD.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaD.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaDFocusGained

    private void jCmbCarreraDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraDActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraD.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraDActionPerformed

    private void jCmbCarreraDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraDFocusGained
        BD mBD = new BD();
        this.jCmbCarreraD.removeAllItems();
        this.jCmbSemestreD.removeAllItems();
        this.jCmbGrupoD.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaD.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraD.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraDFocusGained

    private void jCmbSemestreDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreDActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreD.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreDActionPerformed

    private void jCmbSemestreDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreDFocusGained
        BD mBD = new BD();
        this.jCmbSemestreD.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaD.getSelectedItem()), String.valueOf(this.jCmbCarreraD.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreD.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreDFocusGained

    private void jBtnBuscarDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarDActionPerformed
        try {
            if ((jCmbMateriaD.getItemCount() == 0) | (jCmbCarreraD.getItemCount() == 0) | (jCmbSemestreD.getItemCount() == 0) | (jCmbGrupoD.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                BD mBD = new BD();
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAl = String.valueOf(actual.getIdLista());
                }
                System.out.println(IDAl);
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDAl));
                int cont = 1;

                if (lista.isEmpty()) {

                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblDesempe√±o.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblDesempe√±o.getModel();
                    int a = jTblDesempe√±o.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblDesempe√±o.setModel(modelo);
                    this.jCmbUnidadD.setEnabled(false);
                    this.jTxtNombreTrabajo.setEnabled(false);
                    this.jTxtNombreTrabajo.setText("");
                    this.jBtnAgregarD.setEnabled(false);
                    this.jBtnGuardarD.setVisible(false);
                    this.jBtnCancelarD.setEnabled(false);

                } else {
                    //Mostrar la consulta alumno
                    Object[] encabezado = {"No", "NC", "Nombre"};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual : lista) {
                        Object[] fila = {cont, actual.getNC(), actual.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }
                    this.jTblDesempe√±o.setModel(modelo);
                    this.jCmbUnidadD.setEnabled(true);
                    this.jTxtNombreTrabajo.setEnabled(true);
                    this.jTxtNombreTrabajo.setText("");
                    this.jBtnAgregarD.setEnabled(true);
                    this.jBtnGuardarD.setVisible(false);
                    this.jBtnCancelarD.setEnabled(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarDActionPerformed

    private void jCmbGrupoDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoDActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoD.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoDActionPerformed

    private void jCmbGrupoDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoDFocusGained
        BD mBD = new BD();
        this.jCmbGrupoD.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaD.getSelectedItem()), String.valueOf(this.jCmbCarreraD.getSelectedItem()), Semestre);
            for (Lista actual : mLista) {
                this.jCmbGrupoD.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbGrupoDFocusGained

    private void jBtnBuscarP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarP1ActionPerformed
        int q = 3;
        int z = 0;
        String Unidad = this.jCmbUnidadP1.getSelectedItem().toString();

        BD mBD = new BD();
        String Desem = "";
        List<Lista> mLista;
        try {
            if ((jCmbMateriaP1.getItemCount() == 0) | (jCmbCarreraP1.getItemCount() == 0) | (jCmbSemestreP1.getItemCount() == 0) | (jCmbGrupoP1.getItemCount() == 0) | (jCmbUnidadP1.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDPro = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDPro));
                int cont = 1;

                if (lista.isEmpty()) {
                    jBtnAgregarP1.setEnabled(false);
                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblProducto1.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblProducto1.getModel();
                    int a = jTblProducto1.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblProducto1.setModel(modelo);

                } else {
                    jBtnAgregarP1.setEnabled(true);
                    Object[] encabezado = {"No", "NC", "Nombre"};

                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual1 : lista) {
                        Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }

                    List<Producto> lista2 = mBD.consultarListaTareas(Integer.parseInt(IDPro), Unidad);

                    for (Producto actual : lista2) {
                        modelo.addColumn(String.valueOf(actual.getTareas()));
                        List<Producto> lista3 = mBD.consultarProductoCal(String.valueOf(actual.getTareas()), Unidad);
                        for (Producto actual2 : lista3) {
                            modelo.setValueAt(actual2.getCalificacion(), z, q);
                            z++;
                        }
                        z = 0;
                        q++;
                    }
                    jTblProducto1.setModel(modelo);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarP1ActionPerformed

    private void jCmbGrupoP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoP1ActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoP1.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoP1ActionPerformed

    private void jCmbGrupoP1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoP1FocusGained
        BD mBD = new BD();
        this.jCmbGrupoP1.removeAllItems();
        try {

            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaP1.getSelectedItem()), String.valueOf(this.jCmbCarreraP1.getSelectedItem()), Semestre);

            for (Lista actual : mLista) {
                this.jCmbGrupoP1.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_jCmbGrupoP1FocusGained

    private void jCmbSemestreP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreP1ActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreP1.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreP1ActionPerformed

    private void jCmbSemestreP1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreP1FocusGained
        BD mBD = new BD();
        this.jCmbSemestreP1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaP1.getSelectedItem()), String.valueOf(this.jCmbCarreraP1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreP1.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreP1FocusGained

    private void jBtnAgregarP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarP1ActionPerformed
        try {
            BD mBD = new BD();
            String Unidad = this.jCmbUnidadP1.getSelectedItem().toString();
            int calificacion;
            String Nombre;
            int NC;
            int IdP = 0;
            int IdA = 0;
            int cont = 0;

            Producto mProducto = new Producto();
            List<Producto> lista2 = mBD.consultarListaTareas(Integer.parseInt(IDPro), Unidad);

            for (Producto actual : lista2) {
                cont++;
            }
            int d = 3 + cont;
            for (int j = 3; j < d; j++) {
                for (int i = 0; i < jTblProducto1.getRowCount(); i++) {
                    DefaultTableModel modelo = (DefaultTableModel) jTblProducto1.getModel();
                    JTableHeader th = jTblProducto1.getTableHeader();
                    TableColumnModel tcm = th.getColumnModel();
                    TableColumn tcmn = tcm.getColumn(j);
                    tcmn.getHeaderValue();

                    System.out.println(tcmn.getHeaderValue().toString());

                    calificacion = Integer.parseInt(jTblProducto1.getValueAt(i, j).toString());
                    Nombre = jTblProducto1.getValueAt(i, 2).toString();
                    NC = Integer.parseInt(jTblProducto1.getValueAt(i, 1).toString());

                    List<Alumno> mLista3 = mBD.ConsultaIDAlumno(NC, Nombre);
                    for (Alumno actual3 : mLista3) {
                        IdA = actual3.getIdAlumno();
                    }

                    System.out.println(calificacion);
                    List<Producto> mLista2 = mBD.ConsultaIDProducto(tcmn.getHeaderValue().toString(), IdA);
                    for (Producto actual2 : mLista2) {
                        IdP = actual2.getIdProducto();
                    }

                    System.out.println(IdP);
                    mProducto.setCalificacion(calificacion);
                    mProducto.setTareas(tcmn.getHeaderValue().toString());
                    mProducto.setIdProducto(IdP);
                    mBD.modificarProducto(mProducto);
                }
            }
            JOptionPane.showMessageDialog(null, "Producto(s) actualizado(s)");

            int q = 3;
            int z = 0;

            String Desem = "";
            List<Lista> mLista;
            try {
                mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDDes = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDDes));
                cont = 1;

                Object[] encabezado = {"No", "NC", "Nombre"};

                DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                for (Alumno actual1 : lista) {
                    Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                    modelo.addRow(fila);
                    cont++;
                }

                List<Producto> lista3 = mBD.consultarListaTareas(Integer.parseInt(IDPro), Unidad);

                for (Producto actual : lista3) {
                    modelo.addColumn(String.valueOf(actual.getTareas()));
                    List<Producto> lista4 = mBD.consultarProductoCal(String.valueOf(actual.getTareas()), Unidad);
                    for (Producto actual2 : lista4) {
                        modelo.setValueAt(actual2.getCalificacion(), z, q);
                        z++;
                    }
                    z = 0;
                    q++;
                }
                jTblDesempe√±o1.setModel(modelo);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnAgregarP1ActionPerformed

    private void jCmbUnidadP1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbUnidadP1FocusGained
        BD mBD = new BD();
        this.jCmbUnidadP1.removeAllItems();
        try {
            List<Producto> mLista = mBD.ConsultaPUnidad();
            for (Producto actual : mLista) {
                this.jCmbUnidadP1.addItem(String.valueOf(actual.getUnidadP()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbUnidadP1FocusGained

    private void jCmbCarreraP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraP1ActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraP1.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraP1ActionPerformed

    private void jCmbCarreraP1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraP1FocusGained
        BD mBD = new BD();
        this.jCmbCarreraP1.removeAllItems();
        this.jCmbSemestreP1.removeAllItems();
        this.jCmbGrupoP1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaP1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraP1.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraP1FocusGained

    private void jCmbMateriaP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaP1ActionPerformed
        Materia = String.valueOf(this.jCmbMateriaP1.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaP1ActionPerformed

    private void jCmbMateriaP1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaP1FocusGained
        BD mBD = new BD();
        this.jCmbMateriaP1.removeAllItems();
        this.jCmbCarreraP1.removeAllItems();
        this.jCmbSemestreP1.removeAllItems();
        this.jCmbGrupoP1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaP1.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaP1FocusGained

    private void jBtnCancelarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarPActionPerformed
        jTblProducto.setTableHeader(null);
        DefaultTableModel tb = (DefaultTableModel) jTblProducto.getModel();
        int a = jTblProducto.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }

        Object[] encabezado = {};
        DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
        jTblProducto.setModel(modelo);
        this.jBtnGuardarP.setEnabled(false);
        this.jBtnAgregarP.setEnabled(false);
        this.jCmbUnidadP.setEnabled(false);
        this.jTxtNombreProducto.setText("");
        this.jTxtNombreProducto.setEnabled(false);
        this.jBtnCancelarP.setEnabled(false);
    }//GEN-LAST:event_jBtnCancelarPActionPerformed

    private void jBtnGuardarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGuardarPActionPerformed
        String Nombre;
        String NC;
        String Calificacion;
        String ID = "";
        BD mBD = new BD();
        String Unidad = (String) this.jCmbUnidadP.getSelectedItem();
        //Agregar desempe√±o
        boolean Vacio = true;
        try {
            for (int y = 0; y < jTblProducto.getRowCount(); y++) {
                if (jTblProducto.getValueAt(y, 3) == "" || jTblProducto.getValueAt(y, 3) == null) {
                    Vacio = false;
                }
                System.out.println(Vacio);
            }
            if (Vacio == true) {
                for (int i = 0; i < jTblProducto.getRowCount(); i++) {
                    Nombre = jTblProducto.getValueAt(i, 2).toString();
                    NC = jTblProducto.getValueAt(i, 1).toString();
                    List<Alumno> mLista = mBD.ConsultaIDAlumno(Integer.parseInt(NC), Nombre);
                    for (Alumno actual : mLista) {
                        ID = String.valueOf(actual.getIdAlumno());
                    }
                    Calificacion = jTblProducto.getValueAt(i, 3).toString();
                    Producto mProducto = new Producto();
                    mProducto.setCalificacion(Integer.parseInt(Calificacion));
                    mProducto.setTareas(Trabajo);
                    mProducto.setUnidadP(Unidad);
                    mBD.agregarProducto(mProducto, Integer.parseInt(ID));
                }

                JOptionPane.showMessageDialog(this, "Producto guardado");

                this.jBtnGuardarP.setVisible(false);
                this.jBtnCancelarP.setEnabled(false);
                this.jTxtNombreProducto.setText("");

                jTblProducto.setTableHeader(null);
                DefaultTableModel tb = (DefaultTableModel) jTblProducto.getModel();
                int a = jTblProducto.getRowCount() - 1;
                for (int i = a; i >= 0; i--) {
                    tb.removeRow(tb.getRowCount() - 1);
                }

                Object[] encabezado = {};
                DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                jTblProducto.setModel(modelo);

                Object[] encabezado1 = {};
                DefaultTableModel modelo1 = new DefaultTableModel(null, encabezado1);
                jTblProducto1.setModel(modelo1);
            } else if (Vacio == false) {
                JOptionPane.showMessageDialog(this, "Hay campo(s) vacio(s), favor de verificar");
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnGuardarPActionPerformed

    private void jBtnAgregarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarPActionPerformed
        Trabajo = this.jTxtNombreProducto.getText();
        String Unidad = this.jCmbUnidadP.getSelectedItem().toString();
        boolean a = false;
        BD mBD = new BD();

        String Trabajo2 = "";
        List<Alumno> lista;

        if (!"".equals(Trabajo)) {
            try {
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAl = String.valueOf(actual.getIdLista());
                }

                List<Producto> listaP = mBD.consultarListaTareas(Integer.parseInt(IDAl), Unidad);

                for (Producto actual : listaP) {
                    Trabajo2 = String.valueOf(actual.getTareas());
                    System.out.println(Trabajo2);
                    if (Trabajo2.equals(jTxtNombreProducto.getText())) {
                        a = true;
                        System.out.println(Trabajo2 + "*");
                    }

                }
                if (a == false) {
                    lista = mBD.consultarAlumno(Integer.parseInt(IDAl));

                    int cont = 1;
                    //Mostrar la consulta alumno
                    Object[] encabezado = {"No", "NC", "Nombre", Trabajo};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual : lista) {

                        Object[] fila = {cont, actual.getNC(), actual.getNombre(), ""};
                        modelo.addRow(fila);
                        cont++;
                    }
                    this.jTblProducto.setModel(modelo);

                    this.jBtnAgregarP.setEnabled(false);
                    this.jCmbUnidadP.setEnabled(false);
                    this.jTxtNombreProducto.setEnabled(false);
                    this.jBtnGuardarP.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Existe una tarea con ese nombre");
                }
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "El nombre de la tarea no puede estar vac√≠o.");
        }
    }//GEN-LAST:event_jBtnAgregarPActionPerformed

    private void jCmbMateriaPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaPActionPerformed
        Materia = String.valueOf(this.jCmbMateriaP.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaPActionPerformed

    private void jCmbMateriaPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaPFocusGained
        BD mBD = new BD();
        this.jCmbMateriaP.removeAllItems();
        this.jCmbCarreraP.removeAllItems();
        this.jCmbSemestreP.removeAllItems();
        this.jCmbGrupoP.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaP.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaPFocusGained

    private void jCmbCarreraPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraPActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraP.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraPActionPerformed

    private void jCmbCarreraPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraPFocusGained
        BD mBD = new BD();
        this.jCmbCarreraP.removeAllItems();
        this.jCmbSemestreP.removeAllItems();
        this.jCmbGrupoP.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaP.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraP.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraPFocusGained

    private void jCmbSemestrePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestrePActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreP.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestrePActionPerformed

    private void jCmbSemestrePFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestrePFocusGained
        BD mBD = new BD();
        this.jCmbSemestreP.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaP.getSelectedItem()), String.valueOf(this.jCmbCarreraP.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreP.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestrePFocusGained

    private void jBtnBuscarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarPActionPerformed
        try {
            // TODO add your handling code here:

            //Consulta alumno
            if ((jCmbMateriaP.getItemCount() == 0) | (jCmbCarreraP.getItemCount() == 0) | (jCmbSemestreP.getItemCount() == 0) | (jCmbGrupoP.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                BD mBD = new BD();
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAl = String.valueOf(actual.getIdLista());
                }
                System.out.println(IDAl);
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDAl));
                int cont = 1;
                if (lista.isEmpty()) {

                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblProducto.setTableHeader(null);

                    DefaultTableModel tb = (DefaultTableModel) jTblProducto.getModel();
                    int a = jTblProducto.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblProducto.setModel(modelo);

                    this.jCmbUnidadP.setEnabled(false);
                    this.jTxtNombreProducto.setEnabled(false);
                    this.jTxtNombreProducto.setText("");
                    this.jBtnAgregarP.setEnabled(false);
                    this.jBtnGuardarP.setVisible(false);
                    this.jBtnCancelarP.setEnabled(false);
                } else {
                    //Mostrar la consulta alumno
                    Object[] encabezado = {"No", "NC", "Nombre"};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual : lista) {
                        Object[] fila = {cont, actual.getNC(), actual.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }
                    this.jTblProducto.setModel(modelo);
                    this.jCmbUnidadP.setEnabled(true);
                    this.jTxtNombreProducto.setEnabled(true);
                    this.jTxtNombreProducto.setText("");
                    this.jBtnAgregarP.setEnabled(true);
                    this.jBtnGuardarP.setVisible(false);
                    this.jBtnCancelarP.setEnabled(true);
                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarPActionPerformed

    private void jCmbGrupoPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoPActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoP.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoPActionPerformed

    private void jCmbGrupoPFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoPFocusGained
        BD mBD = new BD();
        this.jCmbGrupoP.removeAllItems();
        try {

            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaP.getSelectedItem()), String.valueOf(this.jCmbCarreraP.getSelectedItem()), Semestre);

            for (Lista actual : mLista) {
                this.jCmbGrupoP.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_jCmbGrupoPFocusGained

    private void jBtnAgregarC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarC1ActionPerformed
        try {
            BD mBD = new BD();
            String Unidad = this.jCmbUnidadC1.getSelectedItem().toString();
            int calificacion;
            String Nombre;
            int NC;
            int IdD = 0;
            int IdA = 0;
            int cont = 0;

            Conocimiento mConocimiento = new Conocimiento();
            List<Conocimiento> lista2 = mBD.ConsultaCUnidad(Integer.parseInt(IDCon), Integer.parseInt(Unidad));

            for (Conocimiento actual : lista2) {
                cont++;
            }
            int d = 3 + cont;
            for (int j = 3; j < d; j++) {
                for (int i = 0; i < jTblConocimiento1.getRowCount(); i++) {
                    DefaultTableModel modelo = (DefaultTableModel) jTblConocimiento1.getModel();
                    JTableHeader th = jTblConocimiento1.getTableHeader();
                    TableColumnModel tcm = th.getColumnModel();
                    TableColumn tcmn = tcm.getColumn(j);
                    tcmn.getHeaderValue();

                    System.out.println(tcmn.getHeaderValue().toString());

                    calificacion = Integer.parseInt(jTblConocimiento1.getValueAt(i, j).toString());
                    Nombre = jTblConocimiento1.getValueAt(i, 2).toString();
                    NC = Integer.parseInt(jTblConocimiento1.getValueAt(i, 1).toString());

                    List<Alumno> mLista3 = mBD.ConsultaIDAlumno(NC, Nombre);
                    for (Alumno actual3 : mLista3) {
                        IdA = actual3.getIdAlumno();
                    }

                    System.out.println(calificacion);
                    List<Conocimiento> mLista2 = mBD.ConsultaIDConocimiento(tcmn.getHeaderValue().toString(), IdA);
                    for (Conocimiento actual2 : mLista2) {
                        IdD = actual2.getIdConocimiento();
                    }

                    System.out.println(IdD);
                    mConocimiento.setCalificacion(calificacion);
                    mConocimiento.setUnidad(Integer.parseInt(tcmn.getHeaderValue().toString()));
                    mConocimiento.setIdConocimiento(IdD);
                    mBD.modificarConocimiento(mConocimiento, IdA);
                }
            }
            JOptionPane.showMessageDialog(null, "Conocimiento(s) actualizado(s)");

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnAgregarC1ActionPerformed

    private void jCmbUnidadC1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbUnidadC1FocusGained
        BD mBD = new BD();
        this.jCmbUnidadC1.removeAllItems();
        try {
            List<Conocimiento> mLista = mBD.ConsultaConoUnidad();
            for (Conocimiento actual : mLista) {
                this.jCmbUnidadC1.addItem(String.valueOf(actual.getUnidad()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbUnidadC1FocusGained

    private void jBtnBuscarC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarC1ActionPerformed
        int q = 3;
        int z = 0;
        String Unidad = this.jCmbUnidadC1.getSelectedItem().toString();

        BD mBD = new BD();
        String Conocimiento = "";
        List<Lista> mLista;
        try {
            if ((jCmbMateriaC1.getItemCount() == 0) | (jCmbCarreraC1.getItemCount() == 0) | (jCmbSemestreC1.getItemCount() == 0) | (jCmbGrupoC1.getItemCount() == 0) | (jCmbUnidadC1.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDCon = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDCon));
                int cont = 1;
                if (lista.isEmpty()) {
                    jBtnAgregarC1.setEnabled(false);
                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblConocimiento1.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblConocimiento1.getModel();
                    int a = jTblConocimiento1.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblConocimiento1.setModel(modelo);

                } else {
                    jBtnAgregarC1.setEnabled(true);
                    Object[] encabezado = {"No", "NC", "Nombre"};

                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual1 : lista) {
                        Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }

                    List<Conocimiento> lista2 = mBD.consultarListaUnidadesC(Integer.parseInt(IDCon), Unidad);

                    for (Conocimiento actual : lista2) {
                        modelo.addColumn(String.valueOf(actual.getUnidad()));
                        List<Conocimiento> lista3 = mBD.consultarConocimientoCal(String.valueOf(actual.getUnidad()), IDCon);
                        for (Conocimiento actual2 : lista3) {
                            modelo.setValueAt(actual2.getCalificacion(), z, q);
                            z++;
                        }
                        z = 0;
                        q++;
                    }
                    jTblConocimiento1.setModel(modelo);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarC1ActionPerformed

    private void jCmbGrupoC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoC1ActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoC1.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoC1ActionPerformed

    private void jCmbGrupoC1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoC1FocusGained
        BD mBD = new BD();
        this.jCmbGrupoC1.removeAllItems();
        try {

            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaC1.getSelectedItem()), String.valueOf(this.jCmbCarreraC1.getSelectedItem()), Semestre);

            for (Lista actual : mLista) {
                this.jCmbGrupoC1.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_jCmbGrupoC1FocusGained

    private void jCmbSemestreC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreC1ActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreC1.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreC1ActionPerformed

    private void jCmbSemestreC1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreC1FocusGained
        BD mBD = new BD();
        this.jCmbSemestreC1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaC1.getSelectedItem()), String.valueOf(this.jCmbCarreraC1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreC1.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreC1FocusGained

    private void jCmbCarreraC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraC1ActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraC1.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraC1ActionPerformed

    private void jCmbCarreraC1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraC1FocusGained
        BD mBD = new BD();
        this.jCmbCarreraC1.removeAllItems();
        this.jCmbSemestreC1.removeAllItems();
        this.jCmbGrupoC1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaC1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraC1.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraC1FocusGained

    private void jCmbMateriaC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaC1ActionPerformed
        Materia = String.valueOf(this.jCmbMateriaC1.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaC1ActionPerformed

    private void jCmbMateriaC1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaC1FocusGained
        BD mBD = new BD();
        this.jCmbMateriaC1.removeAllItems();
        this.jCmbCarreraC1.removeAllItems();
        this.jCmbSemestreC1.removeAllItems();
        this.jCmbGrupoC1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaC1.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaC1FocusGained

    private void jBtnGuardarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGuardarCActionPerformed
        String Nombre;
        String NC;
        String Calificacion;
        String ID = "";
        BD mBD = new BD();
        String Unidad = (String) this.jCmbUnidadC.getSelectedItem();

        boolean Vacio = true;
        try {
            for (int y = 0; y < jTblConocimiento.getRowCount(); y++) {
                if (jTblConocimiento.getValueAt(y, 3) == "" || jTblConocimiento.getValueAt(y, 3) == null) {
                    Vacio = false;
                }
                System.out.println(Vacio);
            }
            if (Vacio == true) {
                for (int i = 0; i < jTblConocimiento.getRowCount(); i++) {
                    Nombre = jTblConocimiento.getValueAt(i, 2).toString();
                    NC = jTblConocimiento.getValueAt(i, 1).toString();
                    List<Alumno> mLista = mBD.ConsultaIDAlumno(Integer.parseInt(NC), Nombre);
                    for (Alumno actual : mLista) {
                        ID = String.valueOf(actual.getIdAlumno());
                    }
                    Calificacion = jTblConocimiento.getValueAt(i, 3).toString();
                    Conocimiento mConocimiento = new Conocimiento();
                    mConocimiento.setCalificacion(Integer.parseInt(Calificacion));
                    mConocimiento.setUnidad(Integer.parseInt(Unidad));
                    mBD.agregarConocimiento(mConocimiento, Integer.parseInt(ID));
                }

                JOptionPane.showMessageDialog(this, "Conocimiento guardado");
                this.jBtnGuardarC.setVisible(false);
                this.jBtnCancelarC.setEnabled(false);
                jTblConocimiento.setTableHeader(null);
                DefaultTableModel tb = (DefaultTableModel) jTblConocimiento.getModel();
                int a = jTblConocimiento.getRowCount() - 1;
                for (int i = a; i >= 0; i--) {
                    tb.removeRow(tb.getRowCount() - 1);
                }

                Object[] encabezado = {};
                DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                jTblConocimiento.setModel(modelo);

                Object[] encabezado1 = {};
                DefaultTableModel modelo1 = new DefaultTableModel(null, encabezado1);
                jTblConocimiento1.setModel(modelo1);

            } else if (Vacio == false) {
                JOptionPane.showMessageDialog(this, "Hay campo(s) vacio(s), favor de verificar");
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnGuardarCActionPerformed

    private void jBtnCancelarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarCActionPerformed
        jTblConocimiento.setTableHeader(null);
        DefaultTableModel tb = (DefaultTableModel) jTblConocimiento.getModel();
        int a = jTblConocimiento.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }

        Object[] encabezado = {};
        DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
        jTblConocimiento.setModel(modelo);
        this.jBtnGuardarC.setEnabled(false);
        this.jBtnAgregarC.setEnabled(false);
        this.jCmbUnidadC.setEnabled(false);
        this.jBtnCancelarC.setEnabled(false);
    }//GEN-LAST:event_jBtnCancelarCActionPerformed

    private void jBtnAgregarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarCActionPerformed
        String Unidad = this.jCmbUnidadC.getSelectedItem().toString();
        boolean a = false;
        BD mBD = new BD();
        String Unidad2;
        List<Alumno> lista;

        try {
            List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
            for (Lista actual : mLista) {
                IDAl = String.valueOf(actual.getIdLista());
            }

            List<Conocimiento> listaC = mBD.consultarListaUnidadesC(Integer.parseInt(IDAl), Unidad);

            for (Conocimiento actual : listaC) {
                Unidad2 = String.valueOf(actual.getUnidad());
                System.out.println(Unidad2);
                if (Unidad2.equals(jTxtNombreProducto.getText())) {
                    a = true;
                    System.out.println(Unidad2 + "*");
                }

            }
            if (a == false) {
                lista = mBD.consultarAlumno(Integer.parseInt(IDAl));

                int cont = 1;
                String Nombre = "Unidad " + Unidad;
                //Mostrar la consulta alumno
                Object[] encabezado = {"No", "NC", "Nombre", Nombre};
                DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                for (Alumno actual : lista) {

                    Object[] fila = {cont, actual.getNC(), actual.getNombre(), ""};
                    modelo.addRow(fila);
                    cont++;
                }
                this.jTblConocimiento.setModel(modelo);

                this.jBtnAgregarC.setEnabled(false);
                this.jCmbUnidadC.setEnabled(false);
                this.jBtnGuardarC.setVisible(true);
                this.jBtnGuardarC.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Existe unidad");
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnAgregarCActionPerformed

    private void jBtnBuscarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarCActionPerformed
        try {
            if ((jCmbMateriaC.getItemCount() == 0) | (jCmbCarreraC.getItemCount() == 0) | (jCmbSemestreC.getItemCount() == 0) | (jCmbGrupoC.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                BD mBD = new BD();
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAl = String.valueOf(actual.getIdLista());
                }
                System.out.println(IDAl);
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDAl));
                int cont = 1;

                if (lista.isEmpty()) {

                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a \n por favor seleccione otra.");
                    jTblConocimiento.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblConocimiento.getModel();
                    int a = jTblConocimiento.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblConocimiento.setModel(modelo);
                    jCmbUnidadC.setEnabled(false);
                    this.jBtnAgregarC.setEnabled(false);
                    this.jBtnCancelarC.setEnabled(false);

                } else {
                    //Mostrar la consulta alumno
                    Object[] encabezado = {"No", "NC", "Nombre"};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual : lista) {
                        Object[] fila = {cont, actual.getNC(), actual.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }
                    this.jTblConocimiento.setModel(modelo);
                    this.jCmbUnidadC.setEnabled(true);
                    this.jBtnAgregarC.setEnabled(true);
                    this.jBtnCancelarC.setEnabled(true);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarCActionPerformed

    private void jCmbGrupoCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoCActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoC.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoCActionPerformed

    private void jCmbGrupoCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoCFocusGained
        BD mBD = new BD();
        this.jCmbGrupoC.removeAllItems();
        try {

            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaC.getSelectedItem()), String.valueOf(this.jCmbCarreraC.getSelectedItem()), Semestre);

            for (Lista actual : mLista) {
                this.jCmbGrupoC.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_jCmbGrupoCFocusGained

    private void jCmbSemestreCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreCActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreC.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreCActionPerformed

    private void jCmbSemestreCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreCFocusGained
        BD mBD = new BD();
        this.jCmbSemestreC.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaC.getSelectedItem()), String.valueOf(this.jCmbCarreraC.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreC.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreCFocusGained

    private void jCmbCarreraCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraCActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraC.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraCActionPerformed

    private void jCmbCarreraCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraCFocusGained
        BD mBD = new BD();
        this.jCmbCarreraC.removeAllItems();
        this.jCmbSemestreC.removeAllItems();
        this.jCmbGrupoC.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaC.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraC.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraCFocusGained

    private void jCmbMateriaCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaCActionPerformed
        Materia = String.valueOf(this.jCmbMateriaC.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaCActionPerformed

    private void jCmbMateriaCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaCFocusGained
        BD mBD = new BD();
        this.jCmbMateriaC.removeAllItems();
        this.jCmbCarreraC.removeAllItems();
        this.jCmbSemestreC.removeAllItems();
        this.jCmbGrupoC.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaC.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaCFocusGained

    private void jBtnBuscarAlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarAlmActionPerformed
        try {
            // TODO add your handling code here:
            this.LLenarTablaAlumno();
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarAlmActionPerformed

    private void jCmbMateriaAlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaAlmActionPerformed
        // TODO add your handling code here:
        Materia = String.valueOf(this.jCmbMateriaAlm.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaAlmActionPerformed

    private void jCmbMateriaAlmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaAlmFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbMateriaAlm.removeAllItems();
        this.jCmbCarreraAlm.removeAllItems();
        this.jCmbSemestreAlm.removeAllItems();
        this.jCmbGrupoAlm.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaAlm.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaAlmFocusGained

    private void jCmbCarreraAlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraAlmActionPerformed
        // TODO add your handling code here:
        Carrera = String.valueOf(this.jCmbCarreraAlm.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraAlmActionPerformed

    private void jCmbCarreraAlmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraAlmFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbCarreraAlm.removeAllItems();
        this.jCmbSemestreAlm.removeAllItems();
        this.jCmbGrupoAlm.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaAlm.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraAlm.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraAlmFocusGained

    private void jCmbGrupoAlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoAlmActionPerformed
        // TODO add your handling code here:
        Grupo = String.valueOf(this.jCmbGrupoAlm.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoAlmActionPerformed

    private void jCmbGrupoAlmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoAlmFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbGrupoAlm.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaAlm.getSelectedItem()), String.valueOf(this.jCmbCarreraAlm.getSelectedItem()), Semestre);
            for (Lista actual : mLista) {
                this.jCmbGrupoAlm.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbGrupoAlmFocusGained

    private void jCmbSemestreAlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreAlmActionPerformed
        // TODO add your handling code here:
        Semestre = String.valueOf(this.jCmbSemestreAlm.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreAlmActionPerformed

    private void jCmbSemestreAlmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreAlmFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbSemestreAlm.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaAlm.getSelectedItem()), String.valueOf(this.jCmbCarreraAlm.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreAlm.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreAlmFocusGained

    private void jBtnModificarAlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnModificarAlmActionPerformed
        try {
            if ((jTxtNCAlm.getText().equals("") | (jTxtNombreAlm.getText().equals("")))) {
                JOptionPane.showMessageDialog(rootPane, "Extisten campos vacios");
            } else {
                BD mBD = new BD();
                String IDAlum = "";
                Alumno mAlumno = new Alumno();
                int fila = this.jTblConsultarAlumno.getSelectedRow();

                if (fila >= 0) {
                    int NC = (int) jTblConsultarAlumno.getValueAt(fila, 1);
                    String Nombre = (String) jTblConsultarAlumno.getValueAt(fila, 2);
                    List<Alumno> mAlumno1 = mBD.ConsultaIDAlumno(NC, Nombre);
                    for (Alumno actual : mAlumno1) {
                        IDAlum = String.valueOf(actual.getIdAlumno());
                        System.out.println(IDAlum);
                    }
                }

                mAlumno.setIdAlumno(Integer.parseInt(IDAlum));
                mAlumno.setNC(Integer.parseInt(this.jTxtNCAlm.getText()));
                mAlumno.setNombre(jTxtNombreAlm.getText());

                mBD.modificarAlumno(mAlumno);
                JOptionPane.showMessageDialog(this, "Alumno modificado");
                this.LLenarTablaAlumno();
                jTxtNCAlm.setText(null);
                jTxtNombreAlm.setText(null);
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_jBtnModificarAlmActionPerformed

    private void jTblConsultarAlumnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblConsultarAlumnoMouseClicked
        BD mBD = new BD();

        int fila = this.jTblConsultarAlumno.getSelectedRow();
        if (fila >= 0) {
            int NC = (int) jTblConsultarAlumno.getValueAt(fila, 1);
            String Nombre = (String) jTblConsultarAlumno.getValueAt(fila, 2);

            this.jTxtNombreAlm.setText(Nombre);
            this.jTxtNCAlm.setText(String.valueOf(NC));
        }
    }//GEN-LAST:event_jTblConsultarAlumnoMouseClicked

    private void jTxtNombreAlmKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtNombreAlmKeyTyped
        // TODO add your handling code here:
        if (!Character.isLetter(evt.getKeyChar())
                != (evt.getKeyChar() == KeyEvent.VK_SPACE)
                != (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_jTxtNombreAlmKeyTyped

    private void jTxtNombreAlmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtNombreAlmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtNombreAlmActionPerformed

    private void jTxtNCAlmKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtNCAlmKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9')) && (caracter != KeyEvent.VK_BACK_SPACE)
                && (caracter != '.')) {
            /* lo que deseo colocar aqui es si ya se pulso el caracter (.) el mismo no se pueda repetir*/
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo N√∫meros");
        }
    }//GEN-LAST:event_jTxtNCAlmKeyTyped

    private void BtnGuardarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGuardarAlumnoActionPerformed
        // TODO add your handling code here:
        BD mBD = new BD();

        if (((this.jTxtNCAl.getText().equals("")) | (this.TxtNombreAl.getText().equals("")) | (this.TxtPaternoAl.getText().equals("")) | (this.TxtMaternoAl.getText().equals("") | (this.jCmbMateriaAl.getItemCount() == 0) | (this.jCmbCarreraAl.getItemCount() == 0) | (this.jCmbSemestreAl.getItemCount() == 0) | (this.jCmbGrupoAl.getItemCount() == 0)))) {
            JOptionPane.showMessageDialog(rootPane, "Exiten campos vacios");
        } else {
            boolean Vacio = true;
            int NoC = Integer.parseInt(this.jTxtNCAl.getText());
            List<Alumno> mLista10;

            try {
                mLista10 = mBD.ConcultarAlumnoNC(NoC);
                for (Alumno actual : mLista10) {
                    if (mLista10.isEmpty()) {
                        Vacio = false;
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (Vacio == false) {
                try {
                    //Guardar Alummno
                    Alumno mAlumno = new Alumno();
                    String ApellidoP = this.TxtPaternoAl.getText();
                    String ApellidoM = this.TxtMaternoAl.getText();
                    String Nombre = this.TxtNombreAl.getText();

                    mAlumno.setNombre(ApellidoP + " " + ApellidoM + " " + Nombre);

                    mAlumno.setNC(Integer.parseInt(this.jTxtNCAl.getText()));

                    String Materia = String.valueOf(jCmbMateriaAl.getSelectedItem());
                    String Grupo = String.valueOf(jCmbGrupoAl.getSelectedItem());
                    String Carrera = String.valueOf(jCmbCarreraAl.getSelectedItem());
                    String Semestre = String.valueOf(jCmbSemestreAl.getSelectedItem());
                    //Guardar el productor usando su control

                    String ID = "";
                    List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                    for (Lista actual : mLista) {
                        ID = String.valueOf(actual.getIdLista());
                    }
                    mBD.agregarAlumno(mAlumno, ID);
                    JOptionPane.showMessageDialog(this, "Alumno guardado");

                    this.jTxtNCAl.setText(null);
                    this.TxtPaternoAl.setText(null);
                    this.TxtMaternoAl.setText(null);
                    this.TxtNombreAl.setText(null);
                    this.jCmbMateriaAl.removeAllItems();
                    this.jCmbCarreraAl.removeAllItems();
                    this.jCmbSemestreAl.removeAllItems();
                    this.jCmbGrupoAl.removeAllItems();

                } catch (Exception ex) {
                    System.out.println(ex.toString());
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Numero de control exitente");
            }

        }
    }//GEN-LAST:event_BtnGuardarAlumnoActionPerformed

    private void TxtNombreAlKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtNombreAlKeyTyped
        // TODO add your handling code here:
        if (!Character.isLetter(evt.getKeyChar())
                != (evt.getKeyChar() == KeyEvent.VK_SPACE)
                != (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_TxtNombreAlKeyTyped

    private void jCmbMateriaAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaAlActionPerformed
        // TODO add your handling code here:
        Materia = String.valueOf(this.jCmbMateriaAl.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaAlActionPerformed

    private void jCmbMateriaAlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaAlFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbMateriaAl.removeAllItems();
        this.jCmbCarreraAl.removeAllItems();
        this.jCmbSemestreAl.removeAllItems();
        this.jCmbGrupoAl.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaAl.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaAlFocusGained

    private void jCmbSemestreAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreAlActionPerformed
        // TODO add your handling code here:
        Semestre = String.valueOf(this.jCmbSemestreAl.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreAlActionPerformed

    private void jCmbSemestreAlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreAlFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbSemestreAl.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaAl.getSelectedItem()), String.valueOf(this.jCmbCarreraAl.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreAl.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreAlFocusGained

    private void jCmbGrupoAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoAlActionPerformed
        // TODO add your handling code here:
        Grupo = String.valueOf(this.jCmbGrupoAl.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoAlActionPerformed

    private void jCmbGrupoAlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoAlFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbGrupoAl.removeAllItems();
        try {

            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaAl.getSelectedItem()), String.valueOf(this.jCmbCarreraAl.getSelectedItem()), Semestre);

            for (Lista actual : mLista) {
                this.jCmbGrupoAl.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {

        }
    }//GEN-LAST:event_jCmbGrupoAlFocusGained

    private void jCmbCarreraAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraAlActionPerformed
        // TODO add your handling code here:
        Carrera = String.valueOf(this.jCmbCarreraAl.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraAlActionPerformed

//
    private void jCmbCarreraAlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraAlFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbCarreraAl.removeAllItems();
        this.jCmbSemestreAl.removeAllItems();
        this.jCmbGrupoAl.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaAl.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraAl.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraAlFocusGained

    private void TxtMaternoAlKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMaternoAlKeyTyped
        // TODO add your handling code here:
        if (!Character.isLetter(evt.getKeyChar())
                != (evt.getKeyChar() == KeyEvent.VK_SPACE)
                != (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_TxtMaternoAlKeyTyped

    private void TxtPaternoAlKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtPaternoAlKeyTyped
        // TODO add your handling code here:
        if (!Character.isLetter(evt.getKeyChar())
                != (evt.getKeyChar() == KeyEvent.VK_SPACE)
                != (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_TxtPaternoAlKeyTyped

    private void jTxtNCAlKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtNCAlKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9')) && (caracter != KeyEvent.VK_BACK_SPACE)
                && (caracter != '.')) {
            /* lo que deseo colocar aqui es si ya se pulso el caracter (.) el mismo no se pueda repetir*/
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo N√∫meros");
        }
    }//GEN-LAST:event_jTxtNCAlKeyTyped

    private void jTblConsultarListaLsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblConsultarListaLsMouseClicked
        // TODO add your handling code here:
        BD mBD = new BD();
        String IDLs = "";
        try {
            int fila = this.jTblConsultarListaLs.getSelectedRow();
            this.BtnGuardarLista.setText("Actualizar");
            if (fila >= 0) {
                int IDLista = (int) jTblConsultarListaLs.getValueAt(fila, 0);
                String Materia = (String) jTblConsultarListaLs.getValueAt(fila, 1);
                String Grupo = (String) jTblConsultarListaLs.getValueAt(fila, 2);
                int Semestre = (int) jTblConsultarListaLs.getValueAt(fila, 3);
                String Carrera = (String) jTblConsultarListaLs.getValueAt(fila, 4);

                List<Lista> mLista = mBD.ConsultaIDLista(Materia, Grupo, Semestre, Carrera);
                for (Lista actual : mLista) {
                    IDLs = String.valueOf(actual.getIdLista());
                    System.out.println(IDLs);
                }

                IDL = IDLs;
                System.out.println();

                this.TxtMateriaLs.setText(Materia);
                this.TxtGrupoLs.setText(Grupo);
                this.TxtSemestreLs.setText(String.valueOf(Semestre));
                this.TxtCarreraLs.setText(Carrera);

                opc = 1;
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTblConsultarListaLsMouseClicked

    private void jTblConsultarListaLsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTblConsultarListaLsFocusGained
        try {
            // TODO add your handling code here:
            this.LLenarTablaLista();

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTblConsultarListaLsFocusGained

    private void BtnGuardarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGuardarListaActionPerformed
        // TODO add your handling code here:
        BD mBD = new BD();
        Lista mLista = new Lista();
        if (((this.TxtMateriaLs.getText().equals("")) | (this.TxtGrupoLs.getText().equals("")) | (this.TxtSemestreLs.getText().equals("")) | (this.TxtCarreraLs.getText().equals("")))) {
            JOptionPane.showMessageDialog(rootPane, "Exiten campos vacios");
        } else {
            switch (opc) {
                case 0:
                    try {
                        //Agregar Lista

                        mLista.setCarrera(TxtCarreraLs.getText());
                        mLista.setGrupo(TxtGrupoLs.getText());
                        mLista.setMateria(TxtMateriaLs.getText());
                        mLista.setSemestre(Integer.parseInt(TxtSemestreLs.getText()));

                        //Guardar el productor usando su control
                        mBD.agregarLista(mLista);
                        JOptionPane.showMessageDialog(this, "Lista guardada");
                        this.LLenarTablaLista();
                        this.LimpiarCamposLista();
                    } catch (Exception ex) {
                        System.out.println(ex.toString());
                    }
                    break;
                case 1:
                    try {
                        //Modificar Lista
                        int fila = this.jTblConsultarListaLs.getSelectedRow();

                        if (fila >= 0) {
                            mLista.setIdLista(Integer.parseInt(IDL));
                            mLista.setMateria(this.TxtMateriaLs.getText());
                            mLista.setGrupo(this.TxtGrupoLs.getText());
                            mLista.setSemestre(Integer.parseInt(this.TxtSemestreLs.getText()));
                            mLista.setCarrera(this.TxtCarreraLs.getText());

                            mBD.modificarLista(mLista);
                            JOptionPane.showMessageDialog(null, "Lista modificada");
                            this.LLenarTablaLista();
                            this.LimpiarCamposLista();
                            this.BtnGuardarLista.setText("Guardar");
                            opc = 0;

                        }

                    } catch (Exception ex) {
                        System.out.println(ex.toString());
                    }
                    break;
                default:
                    opc = 0;
                    break;
            }

        }
    }//GEN-LAST:event_BtnGuardarListaActionPerformed

    private void TxtCarreraLsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtCarreraLsKeyTyped
        // TODO add your handling code here:
        if (!Character.isLetter(evt.getKeyChar())
                != (evt.getKeyChar() == KeyEvent.VK_SPACE)
                != (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_TxtCarreraLsKeyTyped

    private void TxtSemestreLsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtSemestreLsKeyTyped
        // TODO add your handling code here:
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9')) && (caracter != KeyEvent.VK_BACK_SPACE)
                && (caracter != '.')) {
            /* lo que deseo colocar aqui es si ya se pulso el caracter (.) el mismo no se pueda repetir*/
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Ingresar Solo N√∫meros");
        }
    }//GEN-LAST:event_TxtSemestreLsKeyTyped

    private void TxtGrupoLsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtGrupoLsKeyTyped
        // TODO add your handling code here:
        if (!Character.isLetter(evt.getKeyChar())
                != (evt.getKeyChar() == KeyEvent.VK_SPACE)
                != (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_TxtGrupoLsKeyTyped

    private void TxtMateriaLsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMateriaLsKeyTyped
        // TODO add your handling code here:
        if (!Character.isLetter(evt.getKeyChar())
                != (evt.getKeyChar() == KeyEvent.VK_SPACE)
                != (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_TxtMateriaLsKeyTyped

    private void jCmbGrupoEDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoEDFocusGained
        BD mBD = new BD();
        this.jCmbGrupoED.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaED.getSelectedItem()), String.valueOf(this.jCmbCarreraED.getSelectedItem()), Semestre);
            for (Lista actual : mLista) {
                this.jCmbGrupoED.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbGrupoEDFocusGained

    private void jCmbGrupoEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoEDActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoED.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoEDActionPerformed

    private void jBtnBuscarEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarEDActionPerformed
        try {
            if ((jCmbMateriaED.getItemCount() == 0) | (jCmbCarreraED.getItemCount() == 0) | (jCmbSemestreED.getItemCount() == 0) | (jCmbGrupoED.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                BD mBD = new BD();
                List<Lista> mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDAl = String.valueOf(actual.getIdLista());
                }
                System.out.println(IDAl);
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDAl));
                int cont = 1;

                if (lista.isEmpty()) {
                    jBtnAgregarED.setEnabled(false);
                    jBtnCancelarED.setEnabled(false);
                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a.");
                    jTblEvaluacionD.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblEvaluacionD.getModel();
                    int a = jTblEvaluacionD.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblEvaluacionD.setModel(modelo);

                } else {
                    jBtnAgregarED.setEnabled(true);
                    jBtnCancelarED.setEnabled(true);
                    //Mostrar la consulta alumno
                    Object[] encabezado = {"No", "NC", "Nombre", "Calificacion"};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual : lista) {
                        Object[] fila = {cont, actual.getNC(), actual.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }
                    this.jTblEvaluacionD.setModel(modelo);
                    this.jBtnAgregarED.setEnabled(true);
                    this.jBtnCancelarED.setEnabled(true);
                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarEDActionPerformed

    private void jCmbSemestreEDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreEDFocusGained
        BD mBD = new BD();
        this.jCmbSemestreED.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaED.getSelectedItem()), String.valueOf(this.jCmbCarreraED.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreED.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreEDFocusGained

    private void jCmbSemestreEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreEDActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreED.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreEDActionPerformed

    private void jCmbCarreraEDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraEDFocusGained
        BD mBD = new BD();
        this.jCmbCarreraED.removeAllItems();
        this.jCmbSemestreED.removeAllItems();
        this.jCmbGrupoED.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaED.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraED.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraEDFocusGained

    private void jCmbCarreraEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraEDActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraED.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraEDActionPerformed

    private void jCmbMateriaEDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaEDFocusGained
        BD mBD = new BD();
        this.jCmbMateriaED.removeAllItems();
        this.jCmbCarreraED.removeAllItems();
        this.jCmbSemestreED.removeAllItems();
        this.jCmbGrupoED.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaED.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaEDFocusGained

    private void jCmbMateriaEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaEDActionPerformed
        Materia = String.valueOf(this.jCmbMateriaED.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaEDActionPerformed

    private void jBtnAgregarEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarEDActionPerformed
        String Nombre;
        String NC;
        String Calificacion;
        String ID = "";
        BD mBD = new BD();
        boolean Vacio = true;
        try {
            for (int y = 0; y < jTblEvaluacionD.getRowCount(); y++) {
                if (jTblEvaluacionD.getValueAt(y, 3) == "" || jTblEvaluacionD.getValueAt(y, 3) == null) {
                    Vacio = false;
                }
                System.out.println(Vacio);
            }
            if (Vacio == true) {
                for (int i = 0; i < jTblEvaluacionD.getRowCount(); i++) {
                    Nombre = jTblEvaluacionD.getValueAt(i, 2).toString();
                    NC = jTblEvaluacionD.getValueAt(i, 1).toString();
                    List<Alumno> mLista = mBD.ConsultaIDAlumno(Integer.parseInt(NC), Nombre);
                    for (Alumno actual : mLista) {
                        ID = String.valueOf(actual.getIdAlumno());
                    }
                    Calificacion = jTblEvaluacionD.getValueAt(i, 3).toString();
                    Eval_Diagnostica mEval_Diagnostica = new Eval_Diagnostica();
                    mEval_Diagnostica.setCalificacion(Integer.parseInt(Calificacion));
                    mBD.agregarEva_Diagnostica(mEval_Diagnostica, Integer.parseInt(ID));
                }

                JOptionPane.showMessageDialog(this, "Evaluaci√≥n guardada");
                this.jBtnAgregarED.setEnabled(false);
                this.jBtnCancelarED.setEnabled(false);
                jTblEvaluacionD.setTableHeader(null);
                DefaultTableModel tb = (DefaultTableModel) jTblEvaluacionD.getModel();
                int a = jTblEvaluacionD.getRowCount() - 1;
                for (int i = a; i >= 0; i--) {
                    tb.removeRow(tb.getRowCount() - 1);
                }

                Object[] encabezado = {};
                DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                jTblEvaluacionD.setModel(modelo);

                Object[] encabezado1 = {};
                DefaultTableModel modelo1 = new DefaultTableModel(null, encabezado1);
                jTblEvaluacionD1.setModel(modelo1);

            } else if (Vacio == false) {
                JOptionPane.showMessageDialog(this, "Hay campo(s) vacio(s), favor de verificar");
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnAgregarEDActionPerformed

    private void jBtnCancelarEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarEDActionPerformed
        jTblEvaluacionD.setTableHeader(null);
        DefaultTableModel tb = (DefaultTableModel) jTblEvaluacionD.getModel();
        int a = jTblEvaluacionD.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }

        Object[] encabezado = {};
        DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
        jTblEvaluacionD.setModel(modelo);
        jBtnCancelarED.setEnabled(false);
        jBtnAgregarED.setEnabled(false);
    }//GEN-LAST:event_jBtnCancelarEDActionPerformed

    private void jCmbMateriaED1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaED1FocusGained
        BD mBD = new BD();
        this.jCmbMateriaED1.removeAllItems();
        this.jCmbCarreraED1.removeAllItems();
        this.jCmbSemestreED1.removeAllItems();
        this.jCmbGrupoED1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaED1.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaED1FocusGained

    private void jCmbMateriaED1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaED1ActionPerformed
        Materia = String.valueOf(this.jCmbMateriaED1.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaED1ActionPerformed

    private void jCmbCarreraED1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraED1FocusGained
        BD mBD = new BD();
        this.jCmbCarreraED1.removeAllItems();
        this.jCmbSemestreED1.removeAllItems();
        this.jCmbGrupoED1.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaED1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraED1.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraED1FocusGained

    private void jCmbCarreraED1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraED1ActionPerformed
        Carrera = String.valueOf(this.jCmbCarreraED1.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraED1ActionPerformed

    private void jBtnAgregarD3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarD3ActionPerformed
        try {
            BD mBD = new BD();
            int calificacion;
            String Nombre;
            int NC;
            int IdD = 0;
            int IdA = 0;
            int cont = 0;

            for (int i = 0; i < jTblEvaluacionD1.getRowCount(); i++) {

                calificacion = Integer.parseInt(jTblEvaluacionD1.getValueAt(i, 3).toString());
                Nombre = jTblEvaluacionD1.getValueAt(i, 2).toString();
                System.out.println(Nombre);
                NC = Integer.parseInt(jTblEvaluacionD1.getValueAt(i, 1).toString());

                List<Alumno> mLista3 = mBD.ConsultaIDAlumno(NC, Nombre);
                for (Alumno actual3 : mLista3) {
                    IdA = actual3.getIdAlumno();
                }
                System.out.println(IdA);
                System.out.println(calificacion);
                List<Eval_Diagnostica> mLista2 = mBD.ConsultaIDEvaluacion(IdA);
                for (Eval_Diagnostica actual2 : mLista2) {
                    IdD = actual2.getIdEval_Diagnostica();
                }

                System.out.println(IdD);
                Eval_Diagnostica mEval_Diagnostica = new Eval_Diagnostica();
                mEval_Diagnostica.setCalificacion(calificacion);
                mEval_Diagnostica.setIdEval_Diagnostica(IdD);
                mBD.modificarEval_Diagnostica(mEval_Diagnostica);
            }
            jLabel79.setVisible(false);
            jLblPromedio.setVisible(false);
            JOptionPane.showMessageDialog(null, "Evaluacion actualizada");

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnAgregarD3ActionPerformed

    private void jCmbSemestreED1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreED1FocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbSemestreED1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaED1.getSelectedItem()), String.valueOf(this.jCmbCarreraED1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreED1.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreED1FocusGained

    private void jCmbSemestreED1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreED1ActionPerformed
        Semestre = String.valueOf(this.jCmbSemestreED1.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreED1ActionPerformed

    private void jCmbGrupoED1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoED1FocusGained
        BD mBD = new BD();
        this.jCmbGrupoED1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaED1.getSelectedItem()), String.valueOf(this.jCmbCarreraED1.getSelectedItem()), Semestre);
            for (Lista actual : mLista) {
                this.jCmbGrupoED1.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbGrupoED1FocusGained

    private void jCmbGrupoED1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoED1ActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoED1.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoED1ActionPerformed

    private void jBtnBuscarED1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarED1ActionPerformed
        jLabel79.setVisible(true);
        jLblPromedio.setVisible(true);
        int q = 3;
        int z = 0;
        int SumaED = 0;
        int PromedioED = 0;
        int r = 0;
        BD mBD = new BD();
        String Desem = "";
        List<Lista> mLista;
        try {
            if ((jCmbMateriaED1.getItemCount() == 0) | (jCmbCarreraED1.getItemCount() == 0) | (jCmbSemestreED1.getItemCount() == 0) | (jCmbGrupoED1.getItemCount() == 0)) {
                JOptionPane.showMessageDialog(rootPane, "No es posible realizar la b√∫squeda,\nPor favor llenar todos los campos.");
            } else {
                mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
                for (Lista actual : mLista) {
                    IDDes = String.valueOf(actual.getIdLista());
                }
                List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDDes));
                int cont = 1;
                if (lista.isEmpty()) {
                    jBtnAgregarD3.setEnabled(false);
                    JOptionPane.showMessageDialog(rootPane, "La lista se encuentra vac√≠a.");
                    jTblEvaluacionD1.setTableHeader(null);
                    DefaultTableModel tb = (DefaultTableModel) jTblEvaluacionD1.getModel();
                    int a = jTblEvaluacionD1.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        tb.removeRow(tb.getRowCount() - 1);
                    }

                    Object[] encabezado = {};
                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    jTblEvaluacionD1.setModel(modelo);

                } else {
                    jBtnAgregarD3.setEnabled(true);
                    Object[] encabezado = {"No", "NC", "Nombre", "Calificaci√≥n"};

                    DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                    for (Alumno actual1 : lista) {
                        Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                        modelo.addRow(fila);
                        cont++;
                    }

                    List<Eval_Diagnostica> lista3 = mBD.ConsultaCalED(Integer.parseInt(IDDes));
                    for (Eval_Diagnostica actual2 : lista3) {
                        modelo.setValueAt(actual2.getCalificacion(), z, 3);
                        SumaED = actual2.getCalificacion() + SumaED;
                        z++;
                    }
                    PromedioED = SumaED / z;
                    z = 0;
                    this.jLblPromedio.setText(String.valueOf(PromedioED));
                    jTblEvaluacionD1.setModel(modelo);
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarED1ActionPerformed

    private void jCmbMateriaAc1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaAc1FocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbMateriaAc1.removeAllItems();
        this.jCmbCarreraAc1.removeAllItems();
        this.jCmbSemestreAc1.removeAllItems();
        this.jCmbGrupoAc1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaAc1.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaAc1FocusGained

    private void jCmbMateriaAc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaAc1ActionPerformed
        // TODO add your handling code here:
        Materia = String.valueOf(this.jCmbMateriaAc1.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaAc1ActionPerformed

    private void jCmbCarreraAc1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraAc1FocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbCarreraAc1.removeAllItems();
        this.jCmbSemestreAc1.removeAllItems();
        this.jCmbGrupoAc1.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaAc1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraAc1.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbCarreraAc1FocusGained

    private void jCmbCarreraAc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraAc1ActionPerformed
        // TODO add your handling code here:
        Carrera = String.valueOf(this.jCmbCarreraAc1.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraAc1ActionPerformed

    private void jCmbSemestreAc1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreAc1FocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbSemestreAc1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaAc1.getSelectedItem()), String.valueOf(this.jCmbCarreraAc1.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreAc1.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreAc1FocusGained

    private void jCmbSemestreAc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreAc1ActionPerformed
        // TODO add your handling code here:
        Semestre = String.valueOf(this.jCmbSemestreAc1.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");
    }//GEN-LAST:event_jCmbSemestreAc1ActionPerformed

    private void jCmbGrupoAc1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoAc1FocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbGrupoAc1.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaAc1.getSelectedItem()), String.valueOf(this.jCmbCarreraAc1.getSelectedItem()), Semestre);
            for (Lista actual : mLista) {
                this.jCmbGrupoAc1.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbGrupoAc1FocusGained

    private void jCmbGrupoAc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoAc1ActionPerformed
        // TODO add your handling code here:
        Grupo = String.valueOf(this.jCmbGrupoAc1.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");
    }//GEN-LAST:event_jCmbGrupoAc1ActionPerformed

    private void jBtnBuscarAc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarAc1ActionPerformed
        try {
            // TODO add your handling code here:
            this.LlenarTablaActitud();
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarAc1ActionPerformed

    private void jBtnAgregarAc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarAc1ActionPerformed
        java.util.Date Fecha = this.jDtcUnidadAc1.getDate();
        List<Alumno> lista;
        BD mBD = new BD();

        if (null != this.jDtcUnidadAc1.getDate()) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");
            Fecha5 = String.valueOf(sdf.format(Fecha));
            System.out.println(Fecha5);
            this.jDtcUnidadAc1.setEnabled(false);

            try {
                lista = mBD.consultarAlumno(Integer.parseInt(IDAc));

                int cont = 1;
                //Mostrar la consulta alumno
                Object[] encabezado = {"No", "NC", "Nombre", Fecha5};
                DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                for (Alumno actual : lista) {

                    Object[] fila = {cont, actual.getNC(), actual.getNombre(), ""};
                    modelo.addRow(fila);
                    cont++;
                }
                this.jTblActitudA.setModel(modelo);
                this.jBtnAgregarA.setEnabled(true);
                this.jBtnAgregarA.setVisible(true);
                jCmbUnidadAc1.setEnabled(false);
                jDtcUnidadAc1.setEnabled(false);
                jBtnAgregarAc1.setEnabled(false);
                jBtnAgregarA.setVisible(true);

            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Primero seleccione una fecha");
        }
    }//GEN-LAST:event_jBtnAgregarAc1ActionPerformed

    private void jCmbMateriaAcMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbMateriaAcMFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbMateriaAcM.removeAllItems();
        this.jCmbCarreraAcM.removeAllItems();
        this.jCmbSemestreAcM.removeAllItems();
        this.jCmbGrupoAcM.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaMateria();
            for (Lista actual : mLista) {
                this.jCmbMateriaAcM.addItem(actual.getMateria());
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbMateriaAcMFocusGained

    private void jCmbMateriaAcMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbMateriaAcMActionPerformed
        // TODO add your handling code here:
        Materia = String.valueOf(this.jCmbMateriaAcM.getSelectedItem());
        System.out.println("Materia: " + Materia + "\n");
    }//GEN-LAST:event_jCmbMateriaAcMActionPerformed

    private void jCmbCarreraAcMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbCarreraAcMFocusGained
        // TODO add your handling code here:
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbCarreraAcM.removeAllItems();
        this.jCmbSemestreAcM.removeAllItems();
        this.jCmbGrupoAcM.removeAllItems();

        try {
            List<Lista> mLista = mBD.consultarListaCarrera(String.valueOf(this.jCmbMateriaAcM.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbCarreraAcM.addItem(actual.getCarrera());
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jCmbCarreraAcMFocusGained

    private void jCmbCarreraAcMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbCarreraAcMActionPerformed
        // TODO add your handling code here:
        Carrera = String.valueOf(this.jCmbCarreraAcM.getSelectedItem());
        System.out.println("Carrera: " + Carrera + "\n");
    }//GEN-LAST:event_jCmbCarreraAcMActionPerformed

    private void jCmbSemestreAcMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbSemestreAcMFocusGained
        // TODO add your handling code here:
        BD mBD = new BD();
        this.jCmbSemestreAcM.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaSemestres(String.valueOf(this.jCmbMateriaAcM.getSelectedItem()), String.valueOf(this.jCmbCarreraAcM.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbSemestreAcM.addItem(String.valueOf(actual.getSemestre()));
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbSemestreAcMFocusGained

    private void jCmbSemestreAcMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbSemestreAcMActionPerformed
        // TODO add your handling code here:
        Semestre = String.valueOf(this.jCmbSemestreAcM.getSelectedItem());
        System.out.println("Semestre: " + Semestre + "\n");

    }//GEN-LAST:event_jCmbSemestreAcMActionPerformed

    private void jCmbGrupoAcMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbGrupoAcMFocusGained

        BD mBD = new BD();
        this.jCmbGrupoAcM.removeAllItems();
        try {
            List<Lista> mLista = mBD.consultarListaGrupo(String.valueOf(this.jCmbMateriaAcM.getSelectedItem()), String.valueOf(this.jCmbCarreraAcM.getSelectedItem()), String.valueOf(this.jCmbSemestreAcM.getSelectedItem()));
            for (Lista actual : mLista) {
                this.jCmbGrupoAcM.addItem(String.valueOf(actual.getGrupo()));
            }
        } catch (SQLException ex) {
            //            Logger.getLogger(FrmBusquedaLista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbGrupoAcMFocusGained

    private void jCmbGrupoAcMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbGrupoAcMActionPerformed
        Grupo = String.valueOf(this.jCmbGrupoAcM.getSelectedItem());
        System.out.println("Grupo: " + Grupo + "\n");

    }//GEN-LAST:event_jCmbGrupoAcMActionPerformed

    private void jBtnBuscarAcMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarAcMActionPerformed
        try {
            // TODO add your handling code here:
            this.LlenarTablaActitudM();
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnBuscarAcMActionPerformed

    private void jCmbUnidadAcMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbUnidadAcMFocusGained
        BD mBD = new BD();
        this.jCmbUnidadAcM.removeAllItems();
        try {
            List<Actitud> mLista = mBD.ConsultaActitudUnidad1();
            for (Actitud actual : mLista) {
                this.jCmbUnidadAcM.addItem(String.valueOf(actual.getUnidad()));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCmbUnidadAcMFocusGained

    private void jCmbUnidadAcMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbUnidadAcMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbUnidadAcMActionPerformed

    private void jBtnAgregarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarAActionPerformed
        boolean Vacio = true;
        Vacio = true;
        String Nombre;
        String NC;
        String ID = "";
        BD mBD = new BD();
        String Actitud = "";
        try {
            for (int y = 0; y < jTblActitudA.getRowCount(); y++) {
                if (jTblActitudA.getValueAt(y, 3) == "" || jTblActitudA.getValueAt(y, 3) == null) {
                    Vacio = false;
                }
                System.out.println(Vacio);
            }
            this.jDtcUnidadAc1.setEnabled(false);
            String Fecha6 = "";
            if (Vacio == true) {
                for (int i = 0; i < jTblActitudA.getRowCount(); i++) {
                    Nombre = jTblActitudA.getValueAt(i, 2).toString();
                    NC = jTblActitudA.getValueAt(i, 1).toString();
                    System.out.println(Nombre);
                    List<Alumno> mLista = mBD.ConsultaIDAlumno(Integer.parseInt(NC), Nombre);
                    for (Alumno actual : mLista) {
                        ID = String.valueOf(actual.getIdAlumno());
                    }
                    Actitud = jTblActitudA.getValueAt(i, 3).toString();
                    Actitud mActitud = new Actitud();
                    mActitud.setAsistencia(Integer.parseInt(Actitud));

                    Date Fecha = this.jDtcUnidadAc1.getDate();
                    SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd");
                    Fecha6 = String.valueOf(sdf.format(Fecha));
                    System.out.println(Fecha5);

                    mActitud.setFecha(Fecha6);
                    mActitud.setUnidad(Integer.parseInt(jCmbUnidadAc1.getSelectedItem().toString()));

                    mBD.agregarActitud(mActitud, Integer.parseInt(ID));
                    this.jDtcUnidadAc1.setEnabled(false);

                }
                JOptionPane.showMessageDialog(this, "Asistencia guardada");
                this.jBtnAgregarA.setEnabled(false);
                this.jBtnAgregarA.setVisible(false);
                jCmbUnidadAc1.setEnabled(false);
                jDtcUnidadAc1.setEnabled(false);
                jBtnAgregarAc1.setEnabled(false);
                jBtnAgregarA.setVisible(false);
                jTblActitudA.setTableHeader(null);
                DefaultTableModel tb = (DefaultTableModel) jTblActitudA.getModel();
                int a = jTblActitudA.getRowCount() - 1;
                for (int i = a; i >= 0; i--) {
                    tb.removeRow(tb.getRowCount() - 1);
                }

                Object[] encabezado = {};
                DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
                jTblActitudA.setModel(modelo);
                jBtnCancelarA.setEnabled(false);

            } else if (Vacio == false) {
                JOptionPane.showMessageDialog(this, "Hay campo(s) vacio(s), favor de verificar");
            }

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnAgregarAActionPerformed

    private void jBtnCancelarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarAActionPerformed
        jTblActitudA.setTableHeader(null);
        DefaultTableModel tb = (DefaultTableModel) jTblActitudA.getModel();
        int a = jTblActitudA.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }

        Object[] encabezado = {};
        DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
        jTblActitudA.setModel(modelo);
        this.jBtnAgregarA.setEnabled(false);
        jCmbUnidadAc1.setEnabled(false);
        jBtnAgregarA.setVisible(false);
        jBtnCancelarA.setEnabled(false);
        jDtcUnidadAc1.setEnabled(false);
        jBtnAgregarAc1.setEnabled(false);
    }//GEN-LAST:event_jBtnCancelarAActionPerformed

    private void jBtnActualizarAcMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnActualizarAcMActionPerformed
        BD mBD = new BD();
        int calificacion;
        String Nombre;
        int NC;
        int IdAC = 0;
        int IdA = 0;
        int Asistencia = 0;
        int cont = 0;
        Actitud mActitud = new Actitud();
        try {
            List<Actitud> lista2 = mBD.consultarFechas(Integer.parseInt(IDAc));

            for (Actitud actual : lista2) {
                cont++;
            }
            int d = 3 + cont;

            for (int j = 3; j < d; j++) {
                for (int i = 0; i < jTblActitudM.getRowCount(); i++) {
                    DefaultTableModel modelo = (DefaultTableModel) jTblActitudM.getModel();
                    JTableHeader th = jTblActitudM.getTableHeader();
                    TableColumnModel tcm = th.getColumnModel();
                    TableColumn tcmn = tcm.getColumn(j);
                    tcmn.getHeaderValue();

                    System.out.println(tcmn.getHeaderValue().toString());

                    Asistencia = Integer.parseInt(jTblActitudM.getValueAt(i, j).toString());
                    Nombre = jTblActitudM.getValueAt(i, 2).toString();
                    NC = Integer.parseInt(jTblActitudM.getValueAt(i, 1).toString());

                    List<Alumno> mLista3 = mBD.ConsultaIDAlumno(NC, Nombre);
                    for (Alumno actual3 : mLista3) {
                        IdA = actual3.getIdAlumno();
                    }

                    String Fecha = tcmn.getHeaderValue().toString();
                    String[] partes = Fecha.split("-");
                    String dia = partes[0];
                    String mes = partes[1];
                    String anyo = partes[2];
                    String FechaAC = anyo + "-" + mes + "-" + dia;

                    System.out.println(Asistencia);
                    List<Actitud> mLista2 = mBD.ConsultaIDActiud(FechaAC, IdA);
                    for (Actitud actual2 : mLista2) {
                        IdAC = actual2.getIdActitud();
                    }

                    System.out.println(IdAC);
                    mActitud.setAsistencia(Asistencia);
                    mActitud.setFecha(FechaAC);
                    mActitud.setIdActitud(IdAC);

                    mBD.modificarActitud(mActitud);
                }

            }
            this.jBtnActualizarAcM.setEnabled(true);
            JOptionPane.showMessageDialog(null, "Asistencia actualizada");

        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBtnActualizarAcMActionPerformed

    private void jBtnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnMostrarActionPerformed
        String Unidad = "";
        String Nombre;
        int cont2 = 0;
        int NC;
        int IdA = 0;
        int SumaD = 0;
        int PromedioD = 0;
        int SumaC = 0;
        int PromedioC = 0;
        int SumaP = 0;
        int PromedioP = 0;
        int x = 3;
        double PromedioA = 0;
        int cont1 = 0;
        double SumaA = 0;

        BD mBD = new BD();
        List<Lista> mLista;

        try {
            mLista = mBD.consultarListarID(Materia, Carrera, Grupo, Semestre);
            for (Lista actual : mLista) {
                IDDes = String.valueOf(actual.getIdLista());
            }
            List<Alumno> lista = mBD.consultarAlumno(Integer.parseInt(IDDes));
            int cont = 1;

            Object[] encabezado = {"No", "NC", "Nombre"};

            DefaultTableModel modelo = new DefaultTableModel(null, encabezado);
            for (Alumno actual1 : lista) {

                Object[] fila = {cont, actual1.getNC(), actual1.getNombre()};
                modelo.addRow(fila);
                cont++;

            }

            List<Conocimiento> Lista10 = mBD.ConcultarUnidades(Integer.parseInt(IDDes));
            for (Conocimiento actual10 : Lista10) {
                Unidad = String.valueOf(actual10.getUnidad());
                modelo.addColumn(String.valueOf("Unidad " + Unidad));
                cont2++;

                for (int i = 0; i < jTblSemestre.getRowCount(); i++) {
                    Nombre = jTblSemestre.getValueAt(i, 2).toString();
                    NC = Integer.parseInt(jTblSemestre.getValueAt(i, 1).toString());

                    List<Alumno> Lista = mBD.ConsultaIDAlumno(NC, Nombre);
                    for (Alumno actual2 : Lista) {
                        IdA = actual2.getIdAlumno();
                    }
                    //Conocimiento
                    List<Conocimiento> Lista3 = mBD.ConsultaCalCon(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                    if (Lista3.isEmpty()) {
                        PromedioC = 0;
                    } else {
                        SumaC = 0;
                        for (Conocimiento actual4 : Lista3) {
                            SumaC = actual4.getCalificacion();
                        }
                        int Puntos = 0;
                        List<PuntosExtras> Lista4 = mBD.ConsultaCalExtras(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                        if (Lista4.isEmpty()) {
                            Puntos = 0;
                        } else {
                            for (PuntosExtras actual5 : Lista4) {
                                Puntos = actual5.getPuntos() + Puntos;
                            }
                        }
                        PromedioC = SumaC + Puntos;

                        if (PromedioC > 100) {
                            PromedioC = 100;
                        }

                    }

                    //Producto
                    List<Producto> Lista5 = mBD.ConsultaCalProd(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                    if (Lista5.isEmpty()) {
                        PromedioP = 0;
                    } else {
                        int numP = 0;
                        SumaP = 0;
                        for (Producto actual6 : Lista5) {
                            SumaP = actual6.getCalificacion() + SumaP;
                            numP++;
                        }
                        PromedioP = SumaP / numP;

                    }

                    //Desempeno
                    List<Desempe√±o> Lista2 = mBD.ConsultaCalDes(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                    if (Lista2.isEmpty()) {
                        PromedioD = 0;
                    } else {
                        int numD = 0;
                        SumaD = 0;
                        for (Desempe√±o actual3 : Lista2) {
                            SumaD = actual3.getCalificacion() + SumaD;
                            numD++;
                        }
                        PromedioD = SumaD / numD;

                    }
                    //Actitud

                    List<Actitud> Lista6 = mBD.ConsultaAsistencia(Integer.parseInt(IDDes), IdA, Integer.parseInt(Unidad));
                    if (Lista6.isEmpty()) {
                        PromedioA = 0;
                    } else {
                        double Sum = 0.0;

                        SumaA = 0;
                        cont1 = 0;
                        for (Actitud actual7 : Lista6) {

                            SumaA = actual7.getAsistencia() + SumaA;
                            cont1++;

                        }
                        System.out.println(cont1);
                        System.out.println(SumaA);
                        Sum = SumaA / cont1;
                        System.out.println(cont1);
                        PromedioA = Sum * 100;
                    }

                    //Total
                    double PromedioUni = 0;
                    PromedioUni = (PromedioC * 0.35) + (PromedioP * 0.35) + (PromedioD * 0.20) + (PromedioA * 0.10);
                    modelo.setValueAt(PromedioUni, i, x);
                }
                x++;
            }

            jTblSemestre.setModel(modelo);
            jBtnMostrar.setEnabled(false);
            jBtnBuscarS.setEnabled(true);
        } catch (SQLException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnMostrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            FrmPrincipal dialog = new FrmPrincipal(new javax.swing.JDialog(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnGuardarAlumno;
    private javax.swing.JButton BtnGuardarLista;
    public javax.swing.JTextField TxtCarreraLs;
    public javax.swing.JTextField TxtGrupoLs;
    public javax.swing.JTextField TxtMateriaLs;
    public javax.swing.JTextField TxtMaternoAl;
    public javax.swing.JTextField TxtNombreAl;
    public javax.swing.JTextField TxtPaternoAl;
    public javax.swing.JTextField TxtSemestreLs;
    private javax.swing.JTabbedPane Unidad;
    private javax.swing.JButton jBtnActualizarAcM;
    private javax.swing.JButton jBtnAgregarA;
    private javax.swing.JButton jBtnAgregarAc1;
    private javax.swing.JButton jBtnAgregarC;
    private javax.swing.JButton jBtnAgregarC1;
    private javax.swing.JButton jBtnAgregarD;
    private javax.swing.JButton jBtnAgregarD1;
    private javax.swing.JButton jBtnAgregarD3;
    private javax.swing.JButton jBtnAgregarED;
    private javax.swing.JButton jBtnAgregarP;
    private javax.swing.JButton jBtnAgregarP1;
    private javax.swing.JButton jBtnAgregarPE1;
    private javax.swing.JButton jBtnBuscarAc1;
    private javax.swing.JButton jBtnBuscarAcM;
    private javax.swing.JButton jBtnBuscarAlm;
    private javax.swing.JButton jBtnBuscarC;
    private javax.swing.JButton jBtnBuscarC1;
    private javax.swing.JButton jBtnBuscarD;
    private javax.swing.JButton jBtnBuscarD1;
    private javax.swing.JButton jBtnBuscarED;
    private javax.swing.JButton jBtnBuscarED1;
    private javax.swing.JButton jBtnBuscarP;
    private javax.swing.JButton jBtnBuscarP1;
    private javax.swing.JButton jBtnBuscarPE;
    private javax.swing.JButton jBtnBuscarPE1;
    private javax.swing.JButton jBtnBuscarS;
    private javax.swing.JButton jBtnBuscarU;
    private javax.swing.JButton jBtnCancelarA;
    private javax.swing.JButton jBtnCancelarC;
    private javax.swing.JButton jBtnCancelarD;
    private javax.swing.JButton jBtnCancelarED;
    private javax.swing.JButton jBtnCancelarP;
    private javax.swing.JButton jBtnCancelarPE;
    private javax.swing.JButton jBtnGuardarC;
    private javax.swing.JButton jBtnGuardarD;
    private javax.swing.JButton jBtnGuardarP;
    private javax.swing.JButton jBtnGuardarPE;
    private javax.swing.JButton jBtnModificarAlm;
    private javax.swing.JButton jBtnMostrar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JComboBox<String> jCmbCarreraAc1;
    private javax.swing.JComboBox<String> jCmbCarreraAcM;
    private javax.swing.JComboBox<String> jCmbCarreraAl;
    private javax.swing.JComboBox<String> jCmbCarreraAlm;
    private javax.swing.JComboBox<String> jCmbCarreraC;
    private javax.swing.JComboBox<String> jCmbCarreraC1;
    private javax.swing.JComboBox<String> jCmbCarreraD;
    private javax.swing.JComboBox<String> jCmbCarreraD1;
    private javax.swing.JComboBox<String> jCmbCarreraED;
    private javax.swing.JComboBox<String> jCmbCarreraED1;
    private javax.swing.JComboBox<String> jCmbCarreraP;
    private javax.swing.JComboBox<String> jCmbCarreraP1;
    private javax.swing.JComboBox<String> jCmbCarreraPE;
    private javax.swing.JComboBox<String> jCmbCarreraPE1;
    private javax.swing.JComboBox<String> jCmbCarreraS;
    private javax.swing.JComboBox<String> jCmbCarreraU;
    private javax.swing.JComboBox<String> jCmbGrupoAc1;
    private javax.swing.JComboBox<String> jCmbGrupoAcM;
    private javax.swing.JComboBox<String> jCmbGrupoAl;
    private javax.swing.JComboBox<String> jCmbGrupoAlm;
    private javax.swing.JComboBox<String> jCmbGrupoC;
    private javax.swing.JComboBox<String> jCmbGrupoC1;
    private javax.swing.JComboBox<String> jCmbGrupoD;
    private javax.swing.JComboBox<String> jCmbGrupoD1;
    private javax.swing.JComboBox<String> jCmbGrupoED;
    private javax.swing.JComboBox<String> jCmbGrupoED1;
    private javax.swing.JComboBox<String> jCmbGrupoP;
    private javax.swing.JComboBox<String> jCmbGrupoP1;
    private javax.swing.JComboBox<String> jCmbGrupoPE;
    private javax.swing.JComboBox<String> jCmbGrupoPE1;
    private javax.swing.JComboBox<String> jCmbGrupoS;
    private javax.swing.JComboBox<String> jCmbGrupoU;
    private javax.swing.JComboBox<String> jCmbMateriaAc1;
    private javax.swing.JComboBox<String> jCmbMateriaAcM;
    private javax.swing.JComboBox<String> jCmbMateriaAl;
    private javax.swing.JComboBox<String> jCmbMateriaAlm;
    private javax.swing.JComboBox<String> jCmbMateriaC;
    private javax.swing.JComboBox<String> jCmbMateriaC1;
    private javax.swing.JComboBox<String> jCmbMateriaD;
    private javax.swing.JComboBox<String> jCmbMateriaD1;
    private javax.swing.JComboBox<String> jCmbMateriaED;
    private javax.swing.JComboBox<String> jCmbMateriaED1;
    private javax.swing.JComboBox<String> jCmbMateriaP;
    private javax.swing.JComboBox<String> jCmbMateriaP1;
    private javax.swing.JComboBox<String> jCmbMateriaPE;
    private javax.swing.JComboBox<String> jCmbMateriaPE1;
    private javax.swing.JComboBox<String> jCmbMateriaS;
    private javax.swing.JComboBox<String> jCmbMateriaU;
    private javax.swing.JComboBox<String> jCmbSemestreAc1;
    private javax.swing.JComboBox<String> jCmbSemestreAcM;
    private javax.swing.JComboBox<String> jCmbSemestreAl;
    private javax.swing.JComboBox<String> jCmbSemestreAlm;
    private javax.swing.JComboBox<String> jCmbSemestreC;
    private javax.swing.JComboBox<String> jCmbSemestreC1;
    private javax.swing.JComboBox<String> jCmbSemestreD;
    private javax.swing.JComboBox<String> jCmbSemestreD1;
    private javax.swing.JComboBox<String> jCmbSemestreED;
    private javax.swing.JComboBox<String> jCmbSemestreED1;
    private javax.swing.JComboBox<String> jCmbSemestreP;
    private javax.swing.JComboBox<String> jCmbSemestreP1;
    private javax.swing.JComboBox<String> jCmbSemestrePE;
    private javax.swing.JComboBox<String> jCmbSemestrePE1;
    private javax.swing.JComboBox<String> jCmbSemestreS;
    private javax.swing.JComboBox<String> jCmbSemestreU;
    private javax.swing.JComboBox<String> jCmbUnidadAc1;
    private javax.swing.JComboBox<String> jCmbUnidadAcM;
    private javax.swing.JComboBox<String> jCmbUnidadC;
    private javax.swing.JComboBox<String> jCmbUnidadC1;
    private javax.swing.JComboBox<String> jCmbUnidadD;
    private javax.swing.JComboBox<String> jCmbUnidadD1;
    private javax.swing.JComboBox<String> jCmbUnidadP;
    private javax.swing.JComboBox<String> jCmbUnidadP1;
    private javax.swing.JComboBox<String> jCmbUnidadPE;
    private javax.swing.JComboBox<String> jCmbUnidadPE1;
    private javax.swing.JComboBox<String> jCmbUnidadU;
    public com.toedter.calendar.JDateChooser jDtcUnidadAc1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLblAlumno;
    private javax.swing.JLabel jLblCarrera1;
    private javax.swing.JLabel jLblCarrera10;
    private javax.swing.JLabel jLblCarrera11;
    private javax.swing.JLabel jLblCarrera12;
    private javax.swing.JLabel jLblCarrera13;
    private javax.swing.JLabel jLblCarrera14;
    private javax.swing.JLabel jLblCarrera2;
    private javax.swing.JLabel jLblCarrera3;
    private javax.swing.JLabel jLblCarrera4;
    private javax.swing.JLabel jLblCarrera5;
    private javax.swing.JLabel jLblCarrera6;
    private javax.swing.JLabel jLblCarrera7;
    private javax.swing.JLabel jLblCarrera8;
    private javax.swing.JLabel jLblCarrera9;
    private javax.swing.JLabel jLblDatos;
    private javax.swing.JLabel jLblGrupo1;
    private javax.swing.JLabel jLblGrupo10;
    private javax.swing.JLabel jLblGrupo11;
    private javax.swing.JLabel jLblGrupo12;
    private javax.swing.JLabel jLblGrupo13;
    private javax.swing.JLabel jLblGrupo14;
    private javax.swing.JLabel jLblGrupo15;
    private javax.swing.JLabel jLblGrupo2;
    private javax.swing.JLabel jLblGrupo3;
    private javax.swing.JLabel jLblGrupo4;
    private javax.swing.JLabel jLblGrupo5;
    private javax.swing.JLabel jLblGrupo6;
    private javax.swing.JLabel jLblGrupo7;
    private javax.swing.JLabel jLblGrupo8;
    private javax.swing.JLabel jLblGrupo9;
    private javax.swing.JLabel jLblListaGeneral;
    private javax.swing.JLabel jLblMateria1;
    private javax.swing.JLabel jLblMateria2;
    private javax.swing.JLabel jLblPromedio;
    private javax.swing.JLabel jLblSemestre1;
    private javax.swing.JLabel jLblSemestre10;
    private javax.swing.JLabel jLblSemestre11;
    private javax.swing.JLabel jLblSemestre12;
    private javax.swing.JLabel jLblSemestre13;
    private javax.swing.JLabel jLblSemestre14;
    private javax.swing.JLabel jLblSemestre2;
    private javax.swing.JLabel jLblSemestre3;
    private javax.swing.JLabel jLblSemestre4;
    private javax.swing.JLabel jLblSemestre5;
    private javax.swing.JLabel jLblSemestre6;
    private javax.swing.JLabel jLblSemestre7;
    private javax.swing.JLabel jLblSemestre8;
    private javax.swing.JLabel jLblSemestre9;
    private javax.swing.JLabel jLblUnidad1;
    private javax.swing.JMenuItem jMICargar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMiSalir;
    private javax.swing.JMenuItem jMniEliminarAlumno;
    private javax.swing.JMenuItem jMniEliminarLista;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    public javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPpmEliminarAlumno;
    private javax.swing.JPopupMenu jPpmEliminarLista;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator18;
    private javax.swing.JSeparator jSeparator19;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator20;
    private javax.swing.JSeparator jSeparator21;
    private javax.swing.JSeparator jSeparator22;
    private javax.swing.JSeparator jSeparator23;
    private javax.swing.JSeparator jSeparator24;
    private javax.swing.JSeparator jSeparator25;
    private javax.swing.JSeparator jSeparator26;
    private javax.swing.JSeparator jSeparator27;
    private javax.swing.JSeparator jSeparator28;
    private javax.swing.JSeparator jSeparator29;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator30;
    private javax.swing.JSeparator jSeparator31;
    private javax.swing.JSeparator jSeparator32;
    private javax.swing.JSeparator jSeparator33;
    private javax.swing.JSeparator jSeparator34;
    private javax.swing.JSeparator jSeparator35;
    private javax.swing.JSeparator jSeparator36;
    private javax.swing.JSeparator jSeparator37;
    private javax.swing.JSeparator jSeparator38;
    private javax.swing.JSeparator jSeparator39;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator40;
    private javax.swing.JSeparator jSeparator41;
    private javax.swing.JSeparator jSeparator42;
    private javax.swing.JSeparator jSeparator43;
    private javax.swing.JSeparator jSeparator44;
    private javax.swing.JSeparator jSeparator45;
    private javax.swing.JSeparator jSeparator46;
    private javax.swing.JSeparator jSeparator47;
    private javax.swing.JSeparator jSeparator48;
    private javax.swing.JSeparator jSeparator49;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    public javax.swing.JTable jTblActitudA;
    public javax.swing.JTable jTblActitudM;
    public javax.swing.JTable jTblConocimiento;
    public javax.swing.JTable jTblConocimiento1;
    public javax.swing.JTable jTblConsultarAlumno;
    public javax.swing.JTable jTblConsultarListaLs;
    public javax.swing.JTable jTblDesempe√±o;
    public javax.swing.JTable jTblDesempe√±o1;
    public javax.swing.JTable jTblEvaluacionD;
    public javax.swing.JTable jTblEvaluacionD1;
    public javax.swing.JTable jTblProducto;
    public javax.swing.JTable jTblProducto1;
    public javax.swing.JTable jTblPuntosExtras;
    public javax.swing.JTable jTblPuntosExtras1;
    public javax.swing.JTable jTblSemestre;
    public javax.swing.JTable jTblUnidad;
    private javax.swing.JTabbedPane jTbpModificar;
    public javax.swing.JTextField jTxtNCAl;
    public javax.swing.JTextField jTxtNCAlm;
    public javax.swing.JTextField jTxtNCAlmPE;
    public javax.swing.JTextField jTxtNombreAlm;
    public javax.swing.JTextField jTxtNombreAlmPE;
    private javax.swing.JTextField jTxtNombreProducto;
    private javax.swing.JTextField jTxtNombreTrabajo;
    public javax.swing.JTextField jTxtPuntosExtras;
    // End of variables declaration//GEN-END:variables
}
